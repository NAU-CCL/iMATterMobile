{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { QuestionService } from 'src/app/services/infoDesk/question.service';\nimport { ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as firebase from 'firebase/app';\nvar FieldValue = firebase.firestore.FieldValue;\nimport { HttpClient } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\nlet ForumDeatailsPage = class ForumDeatailsPage {\n  constructor(afs, activatedRoute, questionService, toastCtrl, router, storage, http, formBuilder) {\n    this.afs = afs;\n    this.activatedRoute = activatedRoute;\n    this.questionService = questionService;\n    this.toastCtrl = toastCtrl;\n    this.router = router;\n    this.storage = storage;\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.question = {\n      title: '',\n      description: '',\n      username: '',\n      userID: '',\n      timestamp: FieldValue,\n      profilePic: '',\n      anon: false,\n      type: '',\n      numOfAnswers: 0,\n      commenters: []\n    };\n    this.questionForm = this.formBuilder.group({\n      title: ['', Validators.compose([Validators.required, Validators.minLength(1)])],\n      description: ['', Validators.compose([Validators.required, Validators.minLength(1)])],\n      anon: [false, Validators.compose([Validators.required])]\n    });\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.getAutoProfilePic();\n  }\n\n  addQuestion(questionForm) {\n    if (!questionForm.valid) {\n      this.showToast('Please enter a title and question');\n    } else {\n      this.question.type = 'user';\n      this.question.title = questionForm.value.title;\n      this.question.description = questionForm.value.description;\n\n      if (questionForm.value.anon) {\n        this.question.anon = this.questionForm.value.anon;\n      }\n\n      this.storage.get('userCode').then(val => {\n        if (val) {\n          const ref = this.afs.firestore.collection('users').where('code', '==', val);\n          ref.get().then(result => {\n            result.forEach(doc => {\n              this.question.userID = val;\n              this.question.timestamp = firebase.firestore.FieldValue.serverTimestamp();\n\n              if (!this.question.anon) {\n                this.question.username = doc.get('username');\n                this.question.profilePic = doc.get('profilePic');\n              } else {\n                this.question.username = 'Anonymous';\n                this.question.profilePic = this.anonPic;\n              }\n\n              this.questionService.addQuestion(this.question).then(() => {\n                this.router.navigateByUrl('/tabs/more/forum');\n                this.showToast('Question posted');\n                this.questionForm.reset();\n              }, err => {\n                this.showToast('There was a problem adding your question');\n              });\n            });\n          });\n        }\n      });\n    }\n  }\n\n  deleteQuestion() {\n    this.questionService.deleteQuestion(this.question.id).then(() => {\n      this.router.navigateByUrl('/');\n      this.showToast('Question deleted');\n    }, err => {\n      this.showToast('');\n    });\n  }\n\n  updateQuestion() {\n    this.questionService.updateQuestion(this.question).then(() => {\n      this.showToast('');\n    }, err => {\n      this.showToast('');\n    });\n  }\n\n  showToast(msg) {\n    this.toastCtrl.create({\n      message: msg,\n      duration: 2000\n    }).then(toast => toast.present());\n  }\n\n  sendEmail(questionForm) {\n    if (questionForm.valid) {\n      this.http.get('https://us-central1-imatter-nau.cloudfunctions.net/sendEmailNotification').subscribe(response => {\n        console.log(response);\n      });\n    }\n  }\n\n  getAutoProfilePic() {\n    firebase.firestore().collection('settings').doc('userSignUpSettings').get().then(result => {\n      this.anonPic = result.get('autoProfilePic');\n    });\n  }\n\n};\nForumDeatailsPage = __decorate([Component({\n  selector: 'app-forum-deatails',\n  templateUrl: './forum-deatails.page.html',\n  styleUrls: ['./forum-deatails.page.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ActivatedRoute, QuestionService, ToastController, Router, Storage, HttpClient, FormBuilder])], ForumDeatailsPage);\nexport { ForumDeatailsPage };","map":null,"metadata":{},"sourceType":"module"}