{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, NgZone } from '@angular/core';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Storage } from '@ionic/storage';\nimport { NativeGeocoder } from '@ionic-native/native-geocoder/ngx';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport { LocationService } from 'src/app/services/resource.service';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nlet ResourcesPage = class ResourcesPage {\n  constructor(zone, geolocation, nativeGeocoder, afs, storage, inAppBrowser, locationService, analyticsService) {\n    this.zone = zone;\n    this.geolocation = geolocation;\n    this.nativeGeocoder = nativeGeocoder;\n    this.afs = afs;\n    this.storage = storage;\n    this.inAppBrowser = inAppBrowser;\n    this.locationService = locationService;\n    this.analyticsService = analyticsService;\n    this.locationList = [];\n    this.filteredList = [];\n    this.locationTypes = [];\n    this.mapLoaded = false;\n    this.options = {\n      timeout: 10000,\n      enableHighAccuracy: true,\n      maximumAge: 3600\n    };\n  }\n\n  ngOnInit() {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.userProfileID = val;\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.userLocationHolder = doc.get('location');\n            this.saveUserLocation(this.userLocationHolder).then(res => {\n              this.initializeLocations();\n            });\n          });\n        });\n      }\n    });\n    this.storage.get('platform').then(val => {\n      this.iosPlatform = val === 'ios';\n    });\n  }\n\n  saveUserLocation(userLocationHolder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.userLocation = this.userLocationHolder;\n      yield this.geolocation.getCurrentPosition().then(resp => {\n        console.log('RESP: ' + resp);\n        this.currentLat = resp.coords.latitude;\n        this.currentLong = resp.coords.longitude;\n      }).catch(error => {\n        console.log('Error getting location', error);\n      });\n      console.log('inside saveUserLocation' + this.currentLat + ', ' + this.currentLong);\n    });\n  } // Get resource locations from db and save them into a local array of objects.\n\n\n  getLocations() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.locations = this.locationService.getLocations();\n      this.locations.forEach(locationList => {\n        locationList.forEach(location => {\n          var streetArray = location.street.split(\" \"); // Stree is actually location address. Split by space to seperate address components.\n\n          streetArray = streetArray.slice(Math.max(streetArray.length - 3, 1));\n          streetArray.pop();\n          location.cityState = streetArray.join(\" \");\n          console.log(`User lat ${this.latitude} long ${this.longitude}`);\n          console.log(`Location lat ${location.latitude} long ${location.longitude}`);\n          location.distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(this.latitude, this.longitude), // USer coordinates\n          new google.maps.LatLng(location.latitude, location.longitude) // Resource Coordinates\n          ); // Handle type arrays\n\n          if (typeof location.type === 'object') {\n            location.type.forEach(type => {\n              if (!this.locationTypes.includes(type)) {\n                this.locationTypes.push(type);\n              }\n            });\n          } // handle types as strings \n          else {\n            if (!this.locationTypes.includes(location.type)) {\n              this.locationTypes.push(location.type);\n            }\n          }\n        });\n        locationList.sort((a, b) => a.distance > b.distance ? 1 : -1);\n        this.locationList = locationList;\n        this.filteredList = this.locationList;\n      });\n    });\n  }\n\n  ngAfterViewInit() {}\n  /*\n  ionViewDidEnter() {\n      this.ngOnInit();\n      this.initializeLocations();\n  }\n  */\n\n\n  initializeLocations() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.geoMaps(this.userLocation); // Set the user location variables and load the map.\n\n      yield this.getLocations(); // Fill the locations array. Requires the map to be loaded first.\n\n      this.locations.forEach(array => {\n        array.forEach(location => {\n          this.addMarker(location);\n        });\n      });\n    });\n  }\n\n  geoMaps(userLocation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.geolocation.getCurrentPosition().then(resp => {\n        this.latitude = resp.coords.latitude;\n        this.longitude = resp.coords.longitude;\n        console.log(this.latitude);\n        console.log(this.longitude);\n        this.map = new google.maps.Map(this.mapNativeElement.nativeElement, {\n          center: {\n            lat: this.latitude,\n            lng: this.longitude\n          },\n          zoom: 16\n        });\n        console.log('displayed the map');\n        this.mapLoaded = true;\n      }).catch(error => {\n        console.log('ERROR LOADING MAP ', error);\n      });\n    });\n  }\n\n  addMarker(location) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pos = {\n        lat: location.latitude,\n        lng: location.longitude\n      };\n\n      if (this.dicon === 'hospital') {\n        this.icon = {\n          // tslint:disable-next-line:max-line-length\n          url: 'https://firebasestorage.googleapis.com/v0/b/imatter-nau.appspot.com/o/locationIcon%2FhospitalPin.png?alt=media&token=f1c91506-8a91-4021-9e89-2549b257f373',\n          scaledSize: new google.maps.Size(80, 80) // scaled size\n\n        };\n      } else if (this.dicon === 'clinic') {\n        this.icon = {\n          // tslint:disable-next-line:max-line-length\n          url: 'https://firebasestorage.googleapis.com/v0/b/imatter-nau.appspot.com/o/locationIcon%2Flocationpin.png?alt=media&token=d3777314-2607-4d4d-991f-638feed705d2',\n          scaledSize: new google.maps.Size(80, 80) // scaled size\n\n        };\n      } else if (this.dicon === 'therapy') {\n        this.icon = {\n          // tslint:disable-next-line:max-line-length\n          url: 'https://firebasestorage.googleapis.com/v0/b/imatter-nau.appspot.com/o/locationIcon%2FtherapyPin.png?alt=media&token=ff228dbe-361d-4399-a5ae-475d058369d5',\n          scaledSize: new google.maps.Size(80, 80) // scaled size\n\n        };\n      }\n\n      const marker = yield new google.maps.Marker({\n        position: pos,\n        map: this.map,\n        title: location.title,\n        icon: this.icon\n      });\n      const contentString = '<div id=\"content\">' + '<div id= \"siteNotice\">' + '</div>' + '<h1 id=\"firstHeading\" class=\"firstHeading\">' + location.title + '</h1></div>';\n      yield google.maps.event.addListener(marker, 'click', function () {\n        const infowindow = new google.maps.InfoWindow({\n          content: contentString,\n          maxWidth: 300\n        });\n        infowindow.open(this.map, marker);\n      });\n    });\n  }\n\n  expandLocationCard() {\n    console.log(this.childNodes);\n    const children = Array.from(this.children);\n    console.log(this.lastChild);\n    console.log(this.id);\n    children.forEach(child => {\n      if (children.indexOf(child) !== 0) {\n        if (child.classList.contains('ion-hide')) {\n          child.classList.remove('ion-hide');\n        } else {\n          child.classList.add('ion-hide');\n        }\n      }\n    });\n    const locationList = document.getElementsByTagName('ion-card');\n    Array.from(locationList).forEach(element => {\n      const otherChildren = Array.from(element.children);\n      otherChildren.forEach(child => {\n        if (otherChildren.indexOf(child) !== 0) {\n          if (!child.classList.contains('ion-hide') && element.id !== this.id) {\n            child.classList.add('ion-hide');\n          }\n        }\n      });\n    });\n  }\n\n  moveToLocation(locLat, locLong) {\n    this.map.setCenter({\n      lat: locLat,\n      lng: locLong\n    });\n  }\n\n  filter() {\n    const filter = document.getElementById(\"filterValue\");\n\n    if (filter.value == 'all') {\n      this.filteredList = this.locationList;\n    } else {\n      this.filteredList = this.locationList.filter(e => e.type == filter.value || e.type.includes(filter.value));\n    }\n  }\n\n  filterResources(event) {\n    console.log('called filter queues in resource page. ');\n    const searchInput = event.target.value;\n    /*\n    let filterDropDown = document.getElementsByClassName('filter-option-all') as HTMLCollectionOf<HTMLOptionElement>;\n    filterDropDown[0].selected = true;\n    */\n    // Dont run search if user cleared their search query.\n\n    if (searchInput) {\n      // Iterate through array of questions using the filter function which removes an element when we return false.\n      // Allow users to search based on resource NAME or CITY/STATE\n      this.filteredList = this.locationList.filter(currentLoc => {\n        // indexOf returns the index where the given string starts. For example \"eggs are good\".indexOf(\"good\") would return 9 since index 9 is where \"good\" starts in the string.\n        return currentLoc.title.toLowerCase().indexOf(searchInput.toLowerCase()) > -1 || currentLoc.cityState.toLowerCase().indexOf(searchInput.toLowerCase()) > -1;\n      });\n    } // If user deletes their search query, show all results again.\n    else {\n      this.filteredList = this.locationList;\n    }\n  }\n\n  logIndividualResourceClicks() {\n    this.analyticsService.updateClicks('numOfClickIndividualResource');\n  }\n\n};\n\n__decorate([ViewChild('mapElement', {\n  static: false\n}), __metadata(\"design:type\", Object)], ResourcesPage.prototype, \"mapNativeElement\", void 0);\n\nResourcesPage = __decorate([Component({\n  selector: 'app-resources',\n  templateUrl: './resources.page.html',\n  styleUrls: ['./resources.page.scss']\n}), __metadata(\"design:paramtypes\", [NgZone, Geolocation, NativeGeocoder, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, Storage, InAppBrowser, LocationService, AnalyticsService])], ResourcesPage);\nexport { ResourcesPage };","map":null,"metadata":{},"sourceType":"module"}