{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { GetReviewSurveyService } from '../../../../services/get-review-survey.service';\nimport { DatePipe } from '@angular/common';\nlet DisplayReviewsPage = class DisplayReviewsPage {\n  constructor(reviewSurveyService, activatedRoute, datepipe) {\n    this.reviewSurveyService = reviewSurveyService;\n    this.activatedRoute = activatedRoute;\n    this.datepipe = datepipe;\n    this.starArray = [1, 2, 3, 4, 5]; // Array that holds reviews that are visble to provide the allusion that reviews are being loaded as a user scrolls.\n\n    this.visibleReviewsArray = [];\n    this.reviewDocArray = [];\n    this.reviewDocArrayLoaded = false;\n    this.currentReviewRefIndex = 0; // Variables used to toggle how many reviews to show user.\n\n    this.showLessReviews = 3;\n    this.showNReviews = this.showLessReviews; // Running total of review scores for a resource.\n\n    this.totalReviewScores = 0; // Array containing the name and response to each question answered in the review.\n    // For example a question may ask, \"Are pets allowed\" and the response could be \"yes, no, or dont know\". We need to\n    // tally the responses so we can display them to the user.\n\n    this.questionNameArray = {};\n    this.showReviewButtonText = \"Show Less\"; // Create output deorater to send the review avg and tag names to the parent\n\n    this.averageRatingForParentEvent = new EventEmitter();\n    this.tagArrayForParentEvent = new EventEmitter();\n  }\n\n  ngOnInit() {\n    // Get id of the resource we are displaying reviews for.\n    this.resourceID = this.activatedRoute.snapshot.paramMap.get('id');\n    this.getReviewsQuery = this.reviewSurveyService.getReviewsForResourceQuery(this.resourceID);\n    console.log('On NGINIT');\n  }\n\n  ionViewWillEnter() {\n    console.log('Will enter display reviews');\n  } // Called when the parent component emits a change event to the value bound to this childs @Input property reloadReviews. \n  // This is a semi hacky way to refresh reviews after a user submits a review.\n\n\n  initializeReviewPage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Reset all variables used to display reviews to the user. This is not the best way this could be done. Angular element are not meant be\n      // manually reloaded but we are fighting angular here and you can see how complex and scattered this can get. Avoid this if you can. If you need\n      // A component to reload data when it is viewed again try to use an observable.\n      // reset the review doc array when this func is called. This is because we need to reload all reviews after the user submits a review.\n      this.reviewDocArray = [];\n      this.visibleReviewsArray = [];\n      this.currentReviewRefIndex = 0;\n      this.totalReviewScores = 0; // Reenable the infinite scroll element.\n\n      document.getElementsByTagName('ion-infinite-scroll')[0].disabled = false;\n      console.log(`Waiting to load reviews`); // Fill an array with refs to each review document in the db, we do this to avoid loading all docs immediately.\n      // Call await to wait for this line of code to finish.\n\n      yield this.getReviewsQuery.get().then(querySnap => {\n        querySnap.forEach(queryDocSnap => {\n          let queryDoc = queryDocSnap.data();\n          this.reviewDocArray.push(queryDoc);\n          this.calculateReviewAverage(queryDoc);\n          this.generateReviewTags(queryDoc);\n          console.log(`Inside review ref array`);\n        });\n      });\n      console.log(`Finished loading reviews`);\n      let loadFive = 0;\n\n      while (loadFive < 5) {\n        this.loadReviewForIndex();\n        loadFive++;\n      }\n\n      console.log(`Review doc array ${this.reviewDocArray}`);\n      console.log(`Visble reviews ${this.visibleReviewsArray}|||||||||| INDEX IS ${this.currentReviewRefIndex}`);\n      this.showNReviews = this.reviewDocArray.length; // Emitt an event when the review doc array is initialized and we have gotten the review average and the review tag array.\n\n      this.sendAvgToParent(this.averageRating, this.reviewDocArray.length);\n      this.sendQuestionNameArrayToParent(this.questionNameArray);\n      this.reviewDocArrayLoaded = true;\n    });\n  } // Returns a Review object.\n\n\n  loadReviewForIndex() {\n    this.visibleReviewsArray.push(this.reviewDocArray[this.currentReviewRefIndex]); // Class level count index keeping track of which reviews have been loaded.\n\n    this.currentReviewRefIndex += 1;\n  }\n\n  loadData(event) {\n    console.log(` Len of DOC array ${this.reviewDocArray.length}`);\n    setTimeout(() => {\n      let loadFiveReviews = 5;\n      let index = 0;\n\n      while (index < loadFiveReviews) {\n        // If there are more reviews load more.\n        if (this.currentReviewRefIndex < this.reviewDocArray.length) {\n          /// Loads a new review into the visibleReviewsArray  object \n          this.loadReviewForIndex();\n          index++;\n        } else {\n          index = 5;\n        }\n      }\n\n      event.target.complete();\n      console.log(`Review ref index ${this.currentReviewRefIndex}:: Review doc array len ${this.reviewDocArray.length} :: Array loaded ${this.reviewDocArrayLoaded}`); // App logic to determine if all data is loaded\n      // and disable the infinite scroll\n\n      if (this.currentReviewRefIndex == this.reviewDocArray.length && this.reviewDocArrayLoaded) {\n        event.target.disabled = true;\n        console.log(`Disabling spinner`);\n      }\n    }, 200);\n  }\n\n  toggleShowNReviews() {\n    if (this.showNReviews === this.reviewDocArray.length) {\n      this.showNReviews = this.showLessReviews;\n      this.showReviewButtonText = \"Show More\";\n    } else {\n      this.showNReviews = this.reviewDocArray.length;\n      this.showReviewButtonText = \"Show Less\";\n    }\n  } // Calulate the average review score for a resource, one review at a time.\n  // Average review is rounded to the closest whole number.\n\n\n  calculateReviewAverage(reviewDoc) {\n    this.totalReviewScores += reviewDoc.reviewRating;\n    this.averageRating = this.totalReviewScores / this.reviewDocArray.length;\n    this.averageRating = Math.round(this.averageRating); //console.log(`Ang Review is ${this.averageRating}`);\n  }\n\n  generateReviewTags(reviewDoc) {\n    let surveyQuestions = reviewDoc.survey_questions; // Get the survey tag name array from the reivew doc.\n    // Tags correspond to questions. They are shortened questions.\n\n    let surveyTagsArray = reviewDoc.survey_tags; // Get the survey tag answers array which is the same length as the tags array.\n\n    let surveyTagAnswers = reviewDoc.survey_answers; // Iterate through each tag, creating a new entry in the tag name array if the current tag has not already been added.\n\n    for (let index = 0; index < surveyTagsArray.length; index++) {\n      // Store the name of the tag and the response to the tag.\n      let tagName = surveyTagsArray[index];\n      let tagAnswer = surveyTagAnswers[index];\n      let questionName = surveyQuestions[index]; // check if key name tagName is in the questionNameArray object already using the in operator.\n\n      if (questionName in this.questionNameArray) {\n        // { 'Can Have Dog': {yes: , no: , na: }}\n        // Get the object correpsonding to the tag name key. This object stores the 'score' for the current tag. Keeps track of the yes's, no's, and i dont knows\n        let tagInfoObj = this.questionNameArray[questionName];\n\n        switch (tagAnswer) {\n          case \"yes\":\n            tagInfoObj.yes += 1; // increment the count for the yes responses to this tag/question.\n\n            break;\n\n          case \"no\":\n            tagInfoObj.no += 1;\n            break;\n\n          case \"na\":\n            tagInfoObj.na += 1;\n            break;\n        } // might need to re assign the info object to the questionNameArray.\n\n      } else // Create new tag array object if none exist for the tag\n        {\n          // Create tag info obj\n          let tagInfoObj = {\n            tagName: tagName,\n            yes: 0,\n            no: 0,\n            na: 0\n          }; // properly increment the correct answer to the tag/question.\n\n          switch (tagAnswer) {\n            case \"yes\":\n              tagInfoObj.yes += 1; // increment the count for the yes responses to this tag/question.\n\n              break;\n\n            case \"no\":\n              tagInfoObj.no += 1;\n              break;\n\n            case \"na\":\n              tagInfoObj.na += 1;\n              break;\n          }\n\n          this.questionNameArray[questionName] = tagInfoObj;\n        }\n    } //console.log(`QUESTION NAME ARRAY ${JSON.stringify(this.questionNameArray) }`);\n\n  }\n\n  sendAvgToParent(avg, numOfReviews) {\n    this.averageRatingForParentEvent.emit([avg, numOfReviews]);\n  }\n\n  sendQuestionNameArrayToParent(reviewTagArray) {\n    this.tagArrayForParentEvent.emit(reviewTagArray);\n  } // Checks if the current element is going to overflow.\n\n\n  checkForReviewOverflow(reviewText) {\n    // If review text is greater than 80, collapse the review.\n    if (reviewText.length > 80) {\n      // Signal that the review should be collapsed.\n      return true;\n    }\n\n    return false;\n  } // Toggles a review between expanded and minimzed.\n\n\n  expandReview(expandButtonEl, reviewTextEl) {\n    let currentInnerHTML = expandButtonEl.innerHTML; // If review is currently expanded, show less.\n\n    if (currentInnerHTML === 'Show Less...') {\n      reviewTextEl.classList.add('minimized-review-text');\n      expandButtonEl.innerHTML = 'Show More...';\n    } else {\n      // If review is currently minimized, show more.\n      reviewTextEl.classList.remove('minimized-review-text');\n      expandButtonEl.innerHTML = 'Show Less...';\n    }\n  }\n\n  ngOnChanges(changes) {\n    // changes.prop contains the old and the new value...\n    console.log(`CHANGES ARRAY ${JSON.stringify(changes.reloadReviews)}`); // Reload reviews when the child receives a change event from the parent. This method ngOnChanges is an angular lifescycle hook that runs\n    // everytime the parent updates a property passed to the child via @Input.\n\n    this.initializeReviewPage(); // Reload reviews when a resource page is visited.\n  }\n\n};\n\n__decorate([Input('resource_name'), __metadata(\"design:type\", Object)], DisplayReviewsPage.prototype, \"resourceTitle\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], DisplayReviewsPage.prototype, \"reloadReviews\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], DisplayReviewsPage.prototype, \"averageRatingForParentEvent\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], DisplayReviewsPage.prototype, \"tagArrayForParentEvent\", void 0);\n\nDisplayReviewsPage = __decorate([Component({\n  selector: 'app-display-reviews',\n  templateUrl: './display-reviews.page.html',\n  styleUrls: ['./display-reviews.page.scss']\n}), __metadata(\"design:paramtypes\", [GetReviewSurveyService, ActivatedRoute, DatePipe])], DisplayReviewsPage);\nexport { DisplayReviewsPage };","map":null,"metadata":{},"sourceType":"module"}