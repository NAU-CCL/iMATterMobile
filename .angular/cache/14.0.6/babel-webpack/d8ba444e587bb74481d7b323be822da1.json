{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter, ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\n/*\n* this directive was built to detect when a user scrolls to the top of a container.\n* It is not being used anymore because we switched to using the ionic pull down to refresh element.\n* ion-refresher\n*/\n\nexport let ScrollableDirective = /*#__PURE__*/(() => {\n  class ScrollableDirective {\n    constructor(el) {\n      this.el = el; // Assign our output property an EventEmitter\n\n      this.scrollPosition = new EventEmitter();\n    } // Listen to events on the element this directive was applied to. Do something if an ionScroll Element is intercepted.\n\n\n    onScroll(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          // Get the actual scroll element so we can get the total height of the scroll element ie visible + nonvisible content.\n          const scrollElement = yield event.target.getScrollElement();\n          const top = event.detail.scrollTop; // Now we can get the height of the scroll element. If we just called this.el.nativeElement.scrollHeight we would  alway get the same value as offsetHeight, ie visible container height.\n\n          const height = scrollElement.scrollHeight;\n          const offset = this.el.nativeElement.offsetHeight; //console.log(`Top ${top} Height ${height} offset ${offset}`)\n\n          if (top > height - offset - 1) {\n            this.scrollPosition.emit('bottom');\n          }\n\n          if (top === 0) {\n            this.scrollPosition.emit('top');\n          }\n        } catch (err) {}\n      });\n    }\n\n  }\n\n  ScrollableDirective.ɵfac = function ScrollableDirective_Factory(t) {\n    return new (t || ScrollableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ScrollableDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ScrollableDirective,\n    selectors: [[\"\", \"chatScrollable\", \"\"]],\n    hostBindings: function ScrollableDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"ionScroll\", function ScrollableDirective_ionScroll_HostBindingHandler($event) {\n          return ctx.onScroll($event);\n        });\n      }\n    },\n    outputs: {\n      scrollPosition: \"scrollPosition\"\n    }\n  });\n  return ScrollableDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}