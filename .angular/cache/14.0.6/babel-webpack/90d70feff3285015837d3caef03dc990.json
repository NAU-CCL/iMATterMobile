{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ChallengeService } from '../../../services/challenges/challenge-service.service';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AlertController } from '@ionic/angular';\nimport { ActivatedRoute } from '@angular/router';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nlet ViewChallengePage = class ViewChallengePage {\n  constructor(challengeService, storage, router, afs, analyticsService, alertController, activatedRoute, inAppBrowser) {\n    this.challengeService = challengeService;\n    this.storage = storage;\n    this.router = router;\n    this.afs = afs;\n    this.analyticsService = analyticsService;\n    this.alertController = alertController;\n    this.activatedRoute = activatedRoute;\n    this.inAppBrowser = inAppBrowser;\n    this.urls = [];\n    this.joined = false;\n    this.joinedChallenges = [];\n    this.completedChallenges = [];\n    this.challenge = {\n      title: '',\n      description: '',\n      type: '',\n      length: 0,\n      coverPicture: '',\n      icon: '',\n      contents: []\n    };\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n  }\n\n  ionViewWillEnter() {\n    // gets the id of the challenge to show.\n    const id = this.activatedRoute.snapshot.paramMap.get('id'); // if the id exists, meaning that this is an already existing survey, get the corresponding\n    // survey and assign it to the Survey object delcared above\n\n    if (id) {\n      this.challengeService.getChallenge(id).subscribe(challenge => {\n        this.challenge = challenge;\n        this.challenge.contents.forEach(task => {\n          task.tips.forEach(tip => {\n            if (tip.includes('https://')) {\n              this.urls.push(tip);\n            }\n          });\n        });\n        console.log(this.challenge);\n      });\n    }\n\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.userID = val;\n            this.challengeService.getJoinedChallenges(this.userID).then(resp => {\n              this.joinedChallenges = resp;\n              this.joinedChallenges.forEach(item => {\n                if (item.challenge.id === this.challenge.id) {\n                  this.joined = true;\n                  this.currentDay = item.currentDay; // More recent dates are greater than older dates.\n                  // So if today is more recent than the date of last completion,\n                  // then dayComplete should be false\n                  //item.dateOfLastCompletion.toDate() < new Date( new Date().setHours(0,0,0,0) )\n\n                  if (item.dateOfLastCompletion.toDate() < new Date(new Date().setHours(0, 0, 0, 0))) {\n                    this.dayComplete = false;\n                  } else {\n                    this.dayComplete = true;\n                  }\n\n                  console.log(`Current Day: ${this.currentDay} Day complete ${this.dayComplete} Date of last completion: ${item.dateOfLastCompletion.toDate()}`);\n                }\n              });\n            });\n            this.challengeService.getCompletedChallenges(this.userID).then(resp => {\n              this.completedChallenges = resp;\n            });\n          });\n        });\n      }\n    });\n  }\n\n  expand(element) {\n    if (element.classList.contains('icon')) {\n      return;\n    }\n\n    let item = element.nextSibling;\n\n    while (item !== null) {\n      if (item.classList.contains('ion-hide')) {\n        item.classList.remove('ion-hide');\n      } else {\n        item.classList.add('ion-hide');\n      }\n\n      item = item.nextSibling;\n    }\n  }\n\n  joinChallenge(id) {\n    const join = {\n      dateStarted: new Date(),\n      dateFinished: '',\n      challenge: this.challenge,\n      currentDay: 1,\n      dateOfLastCompletion: new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0, 0, 0, 0)),\n      dayComplete: false\n    };\n    this.joinedChallenges.push(join);\n    this.joined = true;\n    this.challengeService.updateJoinedChallenges(this.userID, this.joinedChallenges).then(() => {\n      this.presentAlert('Congratulations!', 'You\\'ve joined this challenge');\n    });\n    setTimeout(() => {\n      this.ionViewWillEnter();\n    }, 1000);\n  }\n\n  quitChallenge(id) {\n    console.log(this.joinedChallenges);\n    this.joinedChallenges.forEach((element, index) => {\n      if (element.challenge.id === id) {\n        this.joinedChallenges.splice(index, 1);\n      }\n    });\n    this.challengeService.updateJoinedChallenges(this.userID, this.joinedChallenges).then(() => {\n      this.presentAlert('You have quit this challenge.', 'Don\\'t be afraid to try again!');\n    });\n    this.joined = false;\n  }\n\n  completeDay(challengeId) {\n    // Create an updated array of joined challenges after iterating through the array\n    this.joinedChallenges = this.joinedChallenges.map(item => {\n      if (item.challenge.id === challengeId) {\n        // mark the challenge as complete for the day.\n        item.dayComplete = true;\n        this.dayComplete = true; // Increment current day now that user has completed today.\n\n        item.currentDay++;\n        this.currentDay++; // set the date of the last completed activity to the current date without a timestamp (hh:mm) so we can tell if the user has\n        // waited at least 1 day before they can do the next task.\n\n        item.dateOfLastCompletion = new Date(new Date().setHours(0, 0, 0, 0)); //item.dateOfLastCompletion = new Date(new Date(new Date().setDate(new Date().getDate() - 1)).setHours(0,0,0,0));\n\n        console.log(`Current Day: ${this.currentDay} Day complete ${this.dayComplete} Date of last completion: ${item.dateOfLastCompletion}`);\n        return item;\n      }\n\n      return item;\n    }); //console.log(`Updated challenges array before service: ${JSON.stringify(this.joinedChallenges)}`);\n    // Now update the joined challenges array \n\n    this.challengeService.updateJoinedChallenges(this.userID, this.joinedChallenges).then(r => {\n      console.log(`Updated challenges: ${JSON.stringify(r)}`);\n    });\n  }\n\n  areYouSure(id, checkbox) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header: 'Are you sure?',\n        message: '',\n        buttons: [{\n          text: 'Yes',\n          handler: () => {\n            alert.dismiss(true);\n            this.checkForComplete(id);\n            console.log(this.complete); // Display correct msg to user. If they finshed the challenge let em know.\n\n            if (this.complete) {\n              this.joined = false;\n              this.presentAlert('WOW! You finished the challenge!', 'Way to stick with it.');\n              this.router.navigate(['tabs/habits/completed_challenge/1']); // setTimeout(() => {\n              //     this.ionViewWillEnter();\n              // }, 1000);\n            } else {\n              this.presentAlert('Congratulations!', 'Good work on completing the task for today.' + 'Check back tomorrow for another challenge.');\n            } // Remove the challenge from the users joined challenges array\n            // and then update the joined/completed challenges array.\n\n\n            if (this.complete) {\n              this.joinedChallenges.forEach(item => {\n                if (item.challenge.id === id) {\n                  item.dateFinished = new Date();\n                  const challenge = {\n                    challenge: id,\n                    dateStarted: item.dateStarted,\n                    dateFinished: item.dateFinished\n                  };\n                  this.completedChallenges.push(challenge);\n                  this.joinedChallenges.splice(this.joinedChallenges.indexOf(item), 1);\n                  this.challengeService.updateJoinedChallenges(this.userID, this.joinedChallenges).then(r => console.log(r));\n                  this.challengeService.updateCompletedChallenges(this.userID, this.completedChallenges).then(r => console.log(r));\n                }\n              });\n            } else {\n              // If user did not complete the challenge, update the joined challenges array.\n              this.completeDay(id);\n            } // Change the empty square border into a check box\n\n\n            const icon = document.getElementById(checkbox);\n            icon.name = 'checkbox';\n            return true;\n          }\n        }, {\n          text: 'No',\n          handler: () => {\n            alert.dismiss(false);\n            const check = document.getElementById(id);\n            check.checked = false;\n            return false;\n          }\n        }]\n      });\n      yield alert.present();\n    });\n  }\n\n  checkForComplete(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.joinedChallenges.forEach(item => {\n        if (item.challenge.id === id) {\n          if (item.currentDay === item.challenge.length) {\n            console.log('LAST DAY COMPLETED');\n            this.complete = true;\n          } else {\n            this.complete = false;\n          }\n        }\n      });\n    });\n  }\n\n  presentAlert(header, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header,\n        message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    });\n  }\n\n  showArrowIconOnTask(taskIndex) {\n    // if our current day is incomplete OR currentDay represents tommorows task and is today is complete show the arrow\n    return taskIndex + 1 == this.currentDay && !this.dayComplete || taskIndex + 1 == this.currentDay && this.dayComplete;\n  }\n\n  showCheckBoxIconOnTask(taskIndex) {\n    return taskIndex + 1 < this.currentDay;\n  }\n\n  showCompleteTaskCheckbox(taskIndex) {\n    return taskIndex + 1 == this.currentDay && !this.dayComplete;\n  }\n\n  getTaskCompleteText(taskIndex) {\n    // Task index is a 0 zero based index, add 1 to it so it corresponds directly with currentDay.\n    let taskIndexAsDay = taskIndex + 1; // If the day was completed, then currentDay represents the next day to be completed so subtract 1 to find the task day previous\n    // to the currentDay. Show this text on the task that was completed today.\n\n    if (taskIndexAsDay < this.currentDay) {\n      return 'Day ' + taskIndexAsDay + ' Complete!';\n    } else {\n      return 'Check back tomorrow to complete another task!';\n    }\n  }\n\n};\nViewChallengePage = __decorate([Component({\n  selector: 'app-forum',\n  templateUrl: './viewChallenge.page.html',\n  styleUrls: ['./viewChallenge.page.scss']\n}), __metadata(\"design:paramtypes\", [ChallengeService, Storage, Router, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, AnalyticsService, AlertController, ActivatedRoute, InAppBrowser])], ViewChallengePage);\nexport { ViewChallengePage };","map":null,"metadata":{},"sourceType":"module"}