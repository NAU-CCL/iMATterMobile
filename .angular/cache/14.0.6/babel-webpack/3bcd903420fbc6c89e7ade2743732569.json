{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nlet GetReviewSurveyService = class GetReviewSurveyService {\n  constructor(afs) {\n    // This func used for testing\n    //this.generateReviewQuestionsCollec();\n    this.afs = afs;\n  }\n\n  generateReviewQuestionsCollec() {\n    let reviewQuestions = this.afs.collection('resourceReviewQuestions');\n    reviewQuestions.add({\n      review_questions_id: 1,\n      is_current: true,\n      review_questions: ['Can have dog?', 'Can use kratom?', 'Couples Allowed?', 'Is co-ed?'],\n      review_question_types: ['all', 'all', 'all', 'all'],\n      question_tags: ['Dogs Allowed', 'Kratom Allowed', 'Couples Allowed', 'Is Co-ed']\n    });\n  } // Returns a Query object that contains a query snap shot which contains a document snapshot of the resourceReviewQuestions document\n\n\n  getReviewQuestionsForResources() {\n    // This code returns a query, you can call .get on a query to get a promise that returns a query snapshot!\n    // Query snapshot contains zero or more DocumentSnapshots. Use forEach on the querySnapshot to iterate through the DocumentSnapshots\n    // Call .data on a Document snapshot to get that docs data.\n    return this.afs.collection('resourceReviewQuestions').ref.where('is_current', '==', true);\n  } // Get all reviews for a resource.\n\n\n  getReviewsForResource(resource_id) {\n    console.log(`Resource ID TO QUERY IS ${resource_id}`);\n    return this.afs.collection(\"resourceReviews\", ref => ref.where('resourceID', '==', resource_id)).valueChanges();\n  } // Get all reviews for a resource but return a query object\n\n\n  getReviewsForResourceQuery(resource_id) {\n    return this.afs.collection(\"resourceReviews\").ref.where('resourceID', '==', resource_id).orderBy('reviewDate', 'desc');\n  } // Function used to convert the type field from strings to arrays in the Location collection.\n\n\n  changeResourceTypesFromStringToArray() {\n    this.afs.collection('resourceLocations').ref.get().then(querySnap => {\n      querySnap.forEach(docSnapShot => {\n        let resourceObj = docSnapShot.data();\n        console.log(`Changing resource types from string to array!`);\n\n        if (typeof resourceObj.type === \"string\") {\n          console.log(`resource type is a string::: ${JSON.stringify(resourceObj.type.split())}`);\n          docSnapShot.ref.update({\n            type: resourceObj.type.split()\n          });\n        } else {//console.log(`resource type is NOT string::: ${ JSON.stringify(resourceObj.type)  }`);\n        }\n      });\n    });\n  }\n\n};\nGetReviewSurveyService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object])], GetReviewSurveyService);\nexport { GetReviewSurveyService };","map":null,"metadata":{},"sourceType":"module"}