{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata, __param } from \"tslib\";\nimport { CalendarComponent } from 'ionic2-calendar/calendar';\nimport { Component, ViewChild, Inject, LOCALE_ID } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { formatDate } from '@angular/common';\nimport { Storage } from '@ionic/storage';\nimport { Router } from '@angular/router';\nimport { LocalNotifications } from '@ionic-native/local-notifications/ngx';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as moment from 'moment';\nimport { StorageService } from '../../services/storage.service';\n/**\n * This code written with the help of this tutorial:\n * https://devdactic.com/ionic-4-calendar-app/, https://ionicframework.com/docs/api/alert\n *and this stackoverflow:\n *https://stackoverflow.com/questions/56214875/ionic-calendar-event-does-not-load-on-device\n * Used for the general build and functionality of the calendar\n */\n\nlet CalendarPage = class CalendarPage {\n  constructor(localNotifications, alertCtrl, locale, storage, storageService, afs, analyticsService, router) {\n    this.localNotifications = localNotifications;\n    this.alertCtrl = alertCtrl;\n    this.locale = locale;\n    this.storage = storage;\n    this.storageService = storageService;\n    this.afs = afs;\n    this.analyticsService = analyticsService;\n    this.router = router;\n    this.event = {\n      title: '',\n      desc: '',\n      startTime: '',\n      endTime: '',\n      allDay: false,\n      id: '',\n      AMPM: ''\n    };\n    this.notifications = [];\n    this.eventList = [];\n    this.minDate = moment().toDate().toISOString();\n    this.test = [];\n    this.eventSource = [];\n    this.calendar = {\n      mode: 'month',\n      currentDate: moment().toDate()\n    };\n    this.analytic = {\n      page: '',\n      userID: '',\n      timestamp: '',\n      sessionID: ''\n    };\n    this.items = [];\n    this.newItem = {};\n    this.product = {};\n    this.notifyTime = moment(new Date()).format();\n    this.chosenHours = new Date().getHours();\n    this.chosenMinutes = new Date().getMinutes();\n    this.days = [{\n      title: 'Monday',\n      dayCode: 1,\n      checked: false\n    }, {\n      title: 'Tuesday',\n      dayCode: 2,\n      checked: false\n    }, {\n      title: 'Wednesday',\n      dayCode: 3,\n      checked: false\n    }, {\n      title: 'Thursday',\n      dayCode: 4,\n      checked: false\n    }, {\n      title: 'Friday',\n      dayCode: 5,\n      checked: false\n    }, {\n      title: 'Saturday',\n      dayCode: 6,\n      checked: false\n    }, {\n      title: 'Sunday',\n      dayCode: 0,\n      checked: false\n    }];\n    this.product.content = '123';\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.showAddEvent = false;\n    this.resetEvent();\n    this.loadItems();\n    this.addView();\n    this.getAmpm();\n  }\n\n  resetEvent() {\n    this.event = {\n      title: '',\n      desc: '',\n      startTime: moment().toDate().toISOString(),\n      endTime: moment().toDate().toISOString(),\n      allDay: false,\n      id: '',\n      AMPM: ''\n    };\n  }\n\n  addView() {\n    //this.analytic.sessionID = this.session.id;\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.analytic.page = 'calendar';\n            this.analytic.userID = val;\n            this.analytic.timestamp = firebase.firestore.FieldValue.serverTimestamp(); //this.analytic.sessionID = this.idReference;\n\n            this.analyticsService.addView(this.analytic).then(() => {\n              console.log('successful added view: Calendar');\n            }, err => {\n              console.log('unsucessful added view: calendar');\n            });\n          });\n        });\n      }\n    });\n  }\n\n  deleteEvent() {//window.plugins.calendar.deleteEvent(newTitle,eventLocation,notes,startDate,endDate,success,error);\n  }\n\n  addEventDay() {\n    console.log(\"CHANGE\");\n  } // Create the right event format and reload source\n\n\n  addEvent() {\n    this.currentlyEditing = false;\n    this.notificationIndex = Math.floor(Math.random() * 100000000000);\n    let eventCopy = {\n      title: this.event.title,\n      startTime: moment(this.event.startTime).toDate(),\n      endTime: moment(this.event.endTime).toDate(),\n      allDay: this.event.allDay,\n      desc: this.event.desc,\n      id: this.notificationIndex,\n      AMPM: null\n    };\n\n    if (this.clockType == 12) {\n      let eventCopy = {\n        title: this.event.title,\n        startTime: moment(this.event.startTime).toDate(),\n        endTime: moment(this.event.endTime).toDate(),\n        allDay: this.event.allDay,\n        desc: this.event.desc,\n        id: this.notificationIndex,\n        AMPM: this.event.AMPM\n      };\n\n      if (eventCopy.allDay) {\n        let start = eventCopy.startTime;\n        let end = eventCopy.endTime;\n      }\n\n      if (eventCopy.startTime.getHours() === 12) {\n        eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - 720);\n      }\n\n      if (eventCopy.AMPM === 'pm') {\n        eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() + 720);\n      }\n\n      this.storage.get('userCode').then(val => {\n        if (val) {\n          this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n            snapshot.forEach(doc => {\n              this.subtractTime = doc.get('notificationTime');\n\n              if (this.subtractTime == null) {\n                this.subtractTime = 0;\n              }\n\n              this.testers = eventCopy.startTime.getMinutes() - this.subtractTime;\n              eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - this.subtractTime);\n              this.localNotifications.schedule({\n                id: this.notificationIndex,\n                text: 'You have an event, check your calendar!',\n                trigger: {\n                  at: moment(eventCopy.startTime).toDate()\n                },\n                led: 'FF0000',\n                sound: null\n              });\n            });\n          });\n        }\n      });\n      var currentID = this.notificationIndex;\n      this.eventList.push(eventCopy);\n      this.eventSource.push(eventCopy);\n      this.test.push('1');\n      this.myCal.loadEvents();\n      this.storageService.addItem(eventCopy).then(item => {\n        this.loadItems();\n      });\n      this.localNotifications.schedule({\n        id: this.notificationIndex,\n        text: 'You have an event, check your calendar!',\n        trigger: {\n          at: moment(this.event.startTime).toDate()\n        },\n        led: 'FF0000',\n        sound: null\n      });\n      this.resetEvent();\n      this.showAddEvent = false;\n    } else {\n      if (eventCopy.allDay) {\n        let start = eventCopy.startTime;\n        let end = eventCopy.endTime;\n        eventCopy.startTime = moment(Date.UTC(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate())).toDate();\n        eventCopy.endTime = moment(Date.UTC(end.getUTCFullYear(), end.getUTCMonth(), end.getUTCDate() + 1)).toDate();\n      }\n\n      this.storage.get('userCode').then(val => {\n        if (val) {\n          this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n            snapshot.forEach(doc => {\n              this.subtractTime = doc.get('notificationTime');\n\n              if (this.subtractTime == null) {\n                this.subtractTime = 0;\n              }\n\n              this.testers = eventCopy.startTime.getMinutes() - this.subtractTime;\n              eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - this.subtractTime);\n              this.localNotifications.schedule({\n                id: this.notificationIndex,\n                text: 'You have an event, check your calendar!',\n                trigger: {\n                  at: moment(eventCopy.startTime).toDate()\n                },\n                led: 'FF0000',\n                sound: null\n              });\n            });\n          });\n        }\n      });\n      var currentID = this.notificationIndex;\n      this.eventList.push(eventCopy);\n      this.eventSource.push(eventCopy);\n      this.test.push('1');\n      this.myCal.loadEvents();\n      this.storageService.addItem(eventCopy).then(item => {\n        this.loadItems();\n      });\n      this.localNotifications.schedule({\n        id: this.notificationIndex,\n        text: 'You have an event, check your calendar!',\n        trigger: {\n          at: moment(this.event.startTime).toDate()\n        },\n        led: 'FF0000',\n        sound: null\n      });\n      this.resetEvent();\n      this.showAddEvent = false;\n    }\n  }\n\n  displayCalendarInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertCtrl.create({\n        message: 'For privacy reasons, this calendar will not sync with phones calendar',\n        buttons: ['OK']\n      });\n      yield alert.present();\n    });\n  }\n\n  loadItems() {\n    this.storageService.getItems().then(items => {\n      this.items = items;\n\n      if (items) {\n        this.eventSource = items;\n      } else {\n        console.log('No events');\n      }\n    });\n  }\n\n  getAmpm() {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            this.clockType = doc.get('clockType');\n\n            if (this.clockType == 24) {\n              this.isTwelveHour = false;\n              return true;\n            } else {\n              this.isTwelveHour = true;\n              return false;\n            }\n          });\n        });\n      }\n    });\n  }\n\n  getStorage() {\n    this.storage.get('name').then(val => {\n      return ['name'];\n    });\n  }\n\n  showEvent() {\n    this.storage.get('event').then(val => {});\n  }\n\n  next() {\n    var swiper = document.querySelector('.swiper-container')['swiper'];\n    swiper.slideNext();\n  }\n\n  back() {\n    var swiper = document.querySelector('.swiper-container')['swiper'];\n    swiper.slidePrev();\n  } // Change between month/week/day\n\n\n  changeMode(mode) {\n    this.calendar.mode = mode;\n\n    if (mode === 'day' || mode === 'week') {\n      this.isNotMonthView = true;\n    } else {\n      this.isNotMonthView = false;\n    }\n  } // Focus today\n\n\n  today() {\n    this.calendar.currentDate = moment().toDate();\n  } // Selected date reange and hence title changed\n\n\n  onViewTitleChanged(title) {\n    this.viewTitle = title;\n  }\n\n  storeEditedEvent(ev) {\n    this.currentlyEditing = true;\n    this.event.title = ev.title;\n    this.event.desc = ev.desc;\n    const selectedStart = moment(ev.startTime).toDate();\n    const selectedEnd = moment(ev.endTime).toDate();\n    this.event.startTime = selectedStart.toISOString();\n    this.event.endTime = selectedEnd.toISOString();\n    this.editedEvent = ev;\n  }\n\n  editCancelled() {\n    this.notificationIndex = Math.floor(Math.random() * 100000000000);\n    let eventCopy = {\n      title: this.editedEvent.title,\n      startTime: moment(this.editedEvent.startTime).toDate(),\n      endTime: moment(this.editedEvent.endTime).toDate(),\n      allDay: this.editedEvent.allDay,\n      desc: this.editedEvent.desc,\n      id: this.notificationIndex,\n      AMPM: null\n    };\n\n    if (this.clockType == 12) {\n      let eventCopy = {\n        title: this.editedEvent.title,\n        startTime: moment(this.editedEvent.startTime).toDate(),\n        endTime: moment(this.editedEvent.endTime).toDate(),\n        allDay: this.editedEvent.allDay,\n        desc: this.editedEvent.desc,\n        id: this.notificationIndex,\n        AMPM: this.editedEvent.AMPM\n      };\n\n      if (eventCopy.allDay) {\n        let start = eventCopy.startTime;\n        let end = eventCopy.endTime;\n      }\n\n      if (eventCopy.startTime.getHours() === 12) {\n        eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - 720);\n      }\n\n      if (eventCopy.AMPM === 'pm') {\n        eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() + 720);\n      }\n\n      this.storage.get('userCode').then(val => {\n        if (val) {\n          this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n            snapshot.forEach(doc => {\n              this.subtractTime = doc.get('notificationTime');\n\n              if (this.subtractTime == null) {\n                this.subtractTime = 0;\n              }\n\n              this.testers = eventCopy.startTime.getMinutes() - this.subtractTime;\n              eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - this.subtractTime);\n              this.localNotifications.schedule({\n                id: this.notificationIndex,\n                text: 'You have an event, check your calendar!',\n                trigger: {\n                  at: moment(eventCopy.startTime).toDate()\n                },\n                led: 'FF0000',\n                sound: null\n              });\n            });\n          });\n        }\n      });\n      var currentID = this.notificationIndex;\n      this.eventList.push(eventCopy);\n      this.eventSource.push(eventCopy);\n      this.test.push('1');\n      this.myCal.loadEvents();\n      this.storageService.addItem(eventCopy).then(item => {\n        //lod\n        this.loadItems();\n      });\n      this.localNotifications.schedule({\n        id: this.notificationIndex,\n        text: 'You have an event, check your calendar!',\n        trigger: {\n          at: moment(this.event.startTime).toDate()\n        },\n        led: 'FF0000',\n        sound: null\n      });\n      this.resetEvent();\n      this.showAddEvent = false;\n    } else {\n      if (eventCopy.allDay) {\n        let start = eventCopy.startTime;\n        let end = eventCopy.endTime;\n        eventCopy.startTime = moment(Date.UTC(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate())).toDate();\n        eventCopy.endTime = moment(Date.UTC(end.getUTCFullYear(), end.getUTCMonth(), end.getUTCDate() + 1)).toDate();\n      }\n\n      this.storage.get('userCode').then(val => {\n        if (val) {\n          this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n            snapshot.forEach(doc => {\n              this.subtractTime = doc.get('notificationTime');\n\n              if (this.subtractTime == null) {\n                this.subtractTime = 0;\n              }\n\n              this.testers = eventCopy.startTime.getMinutes() - this.subtractTime;\n              eventCopy.startTime.setMinutes(eventCopy.startTime.getMinutes() - this.subtractTime);\n              this.localNotifications.schedule({\n                id: this.notificationIndex,\n                text: 'You have an event, check your calendar!',\n                trigger: {\n                  at: moment(eventCopy.startTime).toDate()\n                },\n                led: 'FF0000',\n                sound: null\n              });\n            });\n          });\n        }\n      });\n      var currentID = this.notificationIndex;\n      this.eventList.push(eventCopy);\n      this.eventSource.push(eventCopy);\n      this.test.push('1');\n      this.myCal.loadEvents();\n      this.storageService.addItem(eventCopy).then(item => {\n        console.log('?');\n        this.loadItems();\n      });\n      this.localNotifications.schedule({\n        id: this.notificationIndex,\n        text: 'You have an event, check your calendar!',\n        trigger: {\n          at: moment(this.event.startTime).toDate()\n        },\n        led: 'FF0000',\n        sound: null\n      });\n      this.resetEvent();\n      this.showAddEvent = false;\n    }\n  }\n\n  deleteOrCancelEvent() {\n    this.length = this.eventSource.length;\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.eventSource[i].id === this.editedEvent.id) {\n        this.deleteIndex = i;\n      }\n    }\n\n    var temp = this.deleteIndex;\n    this.localNotifications.clear(this.eventSource[this.deleteIndex].id);\n    this.eventSource.splice(this.deleteIndex, 1);\n    this.storage.set('my-items', this.eventSource);\n    this.loadItems();\n    this.confirmDeleteEvent = true;\n    this.editFinished();\n  } // Calendar event was clicked\n\n\n  onEventSelected(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Use Angular date pipe for conversion\n      this.getAmpm();\n      console.log(\"CLICK \" + this.clicked);\n      let start = formatDate(event.startTime, 'medium', this.locale);\n      let end = formatDate(event.endTime, 'medium', this.locale);\n      this.alertOpen = true;\n      const alert = yield this.alertCtrl.create({\n        header: event.title,\n        subHeader: event.desc,\n        message: 'From: ' + start + '<br><br>To: ' + end,\n        buttons: [{\n          text: 'Edit',\n          role: 'edit',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.storeEditedEvent(event);\n\n            if (this.showEditEvent === true) {\n              this.showEditEvent = false;\n            } else {\n              this.showEditEvent = true;\n            }\n\n            this.length = this.eventSource.length;\n\n            for (let i = 0; i < this.length; i++) {\n              if (this.eventSource[i].id === event.id) {\n                this.deleteIndex = i;\n              }\n            }\n\n            var temp = this.deleteIndex;\n            this.localNotifications.clear(this.eventSource[this.deleteIndex].id);\n            this.eventSource.splice(this.deleteIndex, 1);\n            this.storage.set('my-items', this.eventSource);\n            this.loadItems();\n            this.alertOpen = false;\n          }\n        }, {\n          text: 'Delete',\n          role: 'Delete',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.confirmDelete(event);\n            this.reloadItems(event);\n            this.reloadItems(event);\n          }\n        }, {\n          text: 'Okay',\n          handler: () => {\n            console.log('Confirm Okay');\n          }\n        }]\n      });\n      alert.present();\n    });\n  }\n\n  reloadItems(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.storage.set('my-items', this.eventSource);\n      this.loadItems();\n    });\n  }\n\n  confirmDelete(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.alertOpen = true;\n      const alert = yield this.alertCtrl.create({\n        header: 'are you sure?',\n        buttons: [{\n          text: 'Yes',\n          role: 'confirm',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.length = this.eventSource.length;\n\n            for (let i = 0; i < this.length; i++) {\n              if (this.eventSource[i].id === event.id) {\n                this.deleteIndex = i;\n              }\n            }\n\n            var temp = this.deleteIndex;\n            this.localNotifications.clear(this.eventSource[this.deleteIndex].id);\n            this.eventSource.splice(this.deleteIndex, 1);\n            this.storage.set('my-items', this.eventSource);\n            this.loadItems();\n            this.confirmDeleteEvent = true;\n            this.deleteFinished(event);\n          }\n        }, {\n          text: 'cancel',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.confirmDeleteEvent = false;\n            this.alertOpen = false;\n          }\n        }]\n      });\n      alert.present();\n    });\n  }\n\n  editFinished() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertCtrl.create({\n        header: 'Event has been edited',\n        subHeader: '',\n        buttons: [{\n          text: 'Ok',\n          role: 'confirm',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.length = this.eventSource.length;\n\n            for (let i = 0; i < this.length; i++) {\n              if (this.eventSource[i].id === this.editedEvent.id) {\n                this.deleteIndex = i;\n              }\n            }\n\n            var temp = this.deleteIndex;\n            this.localNotifications.clear(this.eventSource[this.deleteIndex].id);\n            this.eventSource.splice(this.deleteIndex, 1);\n            this.storage.set('my-items', this.eventSource);\n            this.loadItems();\n            this.confirmDeleteEvent = true;\n          }\n        }]\n      });\n      alert.present();\n    });\n  }\n\n  deleteFinished(event) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertCtrl.create({\n        header: 'Event has been deleted',\n        subHeader: '',\n        buttons: [{\n          text: 'Ok',\n          role: 'confirm',\n          cssClass: 'secondary',\n          handler: handle => {\n            this.length = this.eventSource.length;\n\n            for (let i = 0; i < this.length; i++) {\n              if (this.eventSource[i].id === event.id) {\n                this.deleteIndex = i;\n              }\n            }\n\n            var temp = this.deleteIndex;\n            this.localNotifications.clear(this.eventSource[this.deleteIndex].id);\n            console.log(\"eventsource id to delete: \" + this.eventSource[this.deleteIndex].id);\n            this.eventSource.splice(this.deleteIndex, 1);\n            this.storage.set('my-items', this.eventSource);\n            this.loadItems();\n            this.confirmDeleteEvent = true;\n          }\n        }]\n      });\n      alert.present();\n    });\n  } // Time slot was clicked\n\n\n  onTimeSelected(ev) {\n    console.log(\"DAY\");\n\n    if (this.currentlyEditing === true) {\n      console.log(\"editing\");\n    } else {\n      const selected = moment(ev.selectedTime).toDate();\n      this.event.startTime = selected.toISOString();\n      selected.setHours(selected.getHours() + 1);\n      this.event.endTime = selected.toISOString();\n    }\n  }\n\n  addToThisDay() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.clicked === true && this.alertOpen !== true && this.isNotMonthView !== true) {\n        const alert = yield this.alertCtrl.create({\n          header: 'Would you like to add an event to this day?',\n          buttons: [{\n            text: 'Yes',\n            role: 'confirm',\n            cssClass: 'secondary',\n            handler: handle => {\n              this.getAmpm();\n              this.showAddEvent = true;\n            }\n          }, {\n            text: 'cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: handle => {\n              this.confirmDeleteEvent = false;\n            }\n          }]\n        });\n        alert.present();\n      }\n\n      this.alertOpen = false;\n    });\n  }\n\n  clickedCalendar() {\n    if (this.alertOpen === true) {\n      this.clicked = false;\n    } else {\n      this.clicked = true;\n      this.addToThisDay();\n    }\n  }\n\n};\n\n__decorate([ViewChild(CalendarComponent), __metadata(\"design:type\", CalendarComponent)], CalendarPage.prototype, \"myCal\", void 0);\n\nCalendarPage = __decorate([Component({\n  selector: 'app-tab3',\n  templateUrl: 'calendar.page.html',\n  styleUrls: ['calendar.page.scss']\n}), __param(2, Inject(LOCALE_ID)), __metadata(\"design:paramtypes\", [LocalNotifications, AlertController, String, Storage, StorageService, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, AnalyticsService, Router])], CalendarPage);\nexport { CalendarPage };","map":null,"metadata":{},"sourceType":"module"}