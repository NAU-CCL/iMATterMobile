{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { LearningModuleService } from '../../services/learningModule/learning-module.service';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport { Storage } from '@ionic/storage';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Router, ActivatedRoute } from '@angular/router';\nlet LearningCenterPage = class LearningCenterPage {\n  constructor(router, storage, learningModService, afs, analyticsService, activatedRoute) {\n    this.router = router;\n    this.storage = storage;\n    this.learningModService = learningModService;\n    this.afs = afs;\n    this.analyticsService = analyticsService;\n    this.activatedRoute = activatedRoute;\n    this.analytic = {\n      page: '',\n      userID: '',\n      timestamp: '',\n      sessionID: ''\n    }; // Arrays to keep track of which modules have been viewed\n\n    this.newModules = [];\n    this.viewedModules = [];\n    this.takenQuizModules = new Map(); // used for keeping track of recurring modules\n\n    this.lmRecurrenceMap = new Map();\n  }\n\n  ngOnInit() {\n    console.log('NG ON INIT');\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.learningModules = this.learningModService.getAllLearningModules(); // WeeksPregnant\n\n    this.storage.get('userCode').then(value => {\n      if (value != null) {\n        this.userCode = value;\n        console.log('userCode: ' + this.userCode); // IMPORTANT: this line is an error fix for modules not showing up\n        // Need to wait for userCode to be initialized before ionViewWillEnter is executed\n\n        this.ionViewWillEnter();\n      }\n    }).catch(e => {\n      console.log('error retrieving userCode: ' + e);\n    });\n    this.highlightID = this.activatedRoute.snapshot.paramMap.get('id');\n    this.addView();\n  }\n\n  ionViewWillEnter() {\n    // don't continue until userCode is initialized\n    if (this.userCode === undefined) {\n      return;\n    }\n\n    console.log('ION VIEW WILL ENTER'); // IMPORTANT: does everything related to checking recurrences\n\n    this.initStorageCheckRecurrence(); // reset these every time so duplicates don't show up\n\n    this.newModules = [];\n    this.viewedModules = [];\n    this.takenQuizModules.clear();\n    this.learningModules.forEach(value => {\n      value.forEach(singleMod => {\n        // Filter down to only the modules that should be visible to this user\n        if (singleMod.userVisibility.includes(this.userCode) && singleMod.moduleActive) {\n          // check if this module has been viewed\n          this.storage.get(singleMod.id + 'beenViewed').then(value => {\n            if (value === true) {\n              this.viewedModules.push(singleMod.id);\n            } else if (value === null) {\n              this.newModules.push(singleMod.id);\n            }\n          }).catch(e => {\n            console.log('error retrieving beenViewed: ' + e);\n          }); // If this module has quiz questions\n\n          if (singleMod.moduleQuiz.length > 0) {\n            // Get this LM's numberTimesQuizTaken from local storage\n            this.storage.get(singleMod.id + 'numberTimesQuizTaken').then(value => {\n              if (value != null) {\n                this.takenQuizModules.set(singleMod.id, value);\n              } else {\n                // since value is null, need to set this one to 0\n                this.takenQuizModules.set(singleMod.id, 0);\n              }\n            }).catch(e => {\n              console.log('error retrieving numberTimesQuizTaken: ' + e);\n            });\n          }\n        }\n      });\n    });\n  }\n  /**\n   * initializes storage used for checking learning module recurrence\n   * stores the local storage info into lmRecurrenceMap to be accessed later\n   * calls checkNewRecurring function to check each module\n   */\n\n\n  initStorageCheckRecurrence() {\n    this.learningModules.forEach(value => {\n      value.forEach(singleMod => {\n        // only check modules that are currently visible to user\n        if (singleMod.userVisibility.includes(this.userCode) && singleMod.moduleActive) {\n          // storedPrevUV = previous user visibility array for this module\n          this.storage.get(singleMod.id + 'storedPrevUV').then(value => {\n            if (value != null) {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedPrevUV', value);\n            } else {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedPrevUV', null);\n            }\n          }).catch(e => {\n            console.log('error retrieving storedPrevUV: ' + e);\n          }); // storedCurrentUV = current user visibility array for this module\n\n          this.storage.get(singleMod.id + 'storedCurrentUV').then(value => {\n            if (value != null) {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedCurrentUV', value);\n            } else {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedCurrentUV', null);\n            }\n          }).catch(e => {\n            console.log('error retrieving storedCurrentUV: ' + e);\n          }); // localUVStoreDate = the date that recurrence was last updated\n\n          this.storage.get(singleMod.id + 'localUVStoreDate').then(value => {\n            if (value != null) {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedDate', value);\n            } else {\n              this.lmRecurrenceMap.set(singleMod.id + 'storedDate', null);\n            } // IMPORTANT: check this module for a new recurrence\n            // Note: this call was moved here as a fix for a local storage issue where the values above weren't being initialized in time\n            // This function call used to be in ionViewWillEnter()\n\n\n            this.checkNewRecurring(singleMod);\n          }).catch(e => {\n            console.log('error retrieving localUVStoreDate: ' + e);\n          });\n        }\n      });\n    });\n  }\n\n  addView() {\n    // this.analytic.sessionID = this.session.id;\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.analytic.page = 'learningModule';\n            this.analytic.userID = val;\n            this.analytic.timestamp = firebase.firestore.FieldValue.serverTimestamp(); // this.analytic.sessionID = this.idReference;\n\n            this.analyticsService.addView(this.analytic).then(() => {\n              console.log('successful added view: learningModules');\n            }, err => {\n              console.log('unsucessful added view: learningModules');\n            });\n          });\n        });\n      }\n    });\n  }\n  /**\n   * Checks to see if a given learning module is showing up as a new recurrence\n   * Example: moduleA showed up in week 34 for 5 days and it's now week 38 and it's showing up again\n   * If so, then clear the local storage for that learning module so it appears as a new module\n   * @param currentMod the module we're checking\n   */\n\n\n  checkNewRecurring(currentMod) {\n    let previousUserVisibility = this.lmRecurrenceMap.get(currentMod.id + 'storedPrevUV');\n    let currentUserVisibility = this.lmRecurrenceMap.get(currentMod.id + 'storedCurrentUV');\n    let storedDate = this.lmRecurrenceMap.get(currentMod.id + 'storedDate'); // Get the current date and put it in MM/DD/YYYY format\n\n    let getDate = new Date();\n    let currentDate = getDate.getMonth() + '/' + getDate.getDate() + '/' + getDate.getFullYear(); // This module has never appeared before for this user, don't need to check for recurrence\n\n    if (previousUserVisibility === null && currentUserVisibility === null && storedDate === null) {\n      // set these values to what they currently are in the database and move on\n      this.storage.set(currentMod.id + 'storedPrevUV', currentMod.previousUserVisibility);\n      this.storage.set(currentMod.id + 'storedCurrentUV', currentMod.userVisibility);\n      this.storage.set(currentMod.id + 'localUVStoreDate', currentDate);\n      return;\n    } else {\n      // if this module's recurrence has already been checked and local storage was cleared for it\n      if (JSON.stringify(currentMod.previousUserVisibility) === JSON.stringify(previousUserVisibility) && JSON.stringify(currentMod.userVisibility) === JSON.stringify(currentUserVisibility) && storedDate === currentDate) {\n        return;\n      } else {\n        let newlyVisible; // get a list of users who weren't in the previousUserVisibility array but are in userVisibility\n\n        newlyVisible = currentMod.userVisibility.filter(item => currentMod.previousUserVisibility.indexOf(item) < 0); // if this module is a newly appearing module for a user, clear the local storage\n\n        if (newlyVisible.includes(this.userCode)) {\n          this.clearLMStorage(currentMod.id);\n        } // update these values\n\n\n        this.storage.set(currentMod.id + 'storedPrevUV', currentMod.previousUserVisibility);\n        this.storage.set(currentMod.id + 'storedCurrentUV', currentMod.userVisibility);\n        this.storage.set(currentMod.id + 'localUVStoreDate', currentDate);\n      }\n    }\n  }\n  /**\n   * Takes two arrays, checks if their contents are equal\n   * Order matters\n   */\n\n\n  arraysEqual(arrayOne, arrayTwo) {\n    if (arrayOne === arrayTwo) {\n      return true;\n    } else if (arrayOne.length === 0 && arrayTwo.length === 0) {\n      return true;\n    } else if (arrayOne.length != arrayTwo.length) {\n      return false;\n    } else {\n      for (let index = 0; index < arrayOne.length; index++) {\n        if (arrayOne[index] !== arrayTwo[index]) {\n          return false;\n        }\n\n        return true;\n      }\n    }\n  } // used to clear a given LM's local storage\n\n\n  clearLMStorage(learningModID) {\n    this.storage.remove(learningModID + 'videoHasEnded');\n    this.storage.remove(learningModID + 'numberTimesQuizTaken');\n    this.storage.remove(learningModID + 'numberQuestionsCorrect');\n    this.storage.remove(learningModID + 'didSubmit');\n    this.storage.remove(learningModID + 'correctQuestions');\n    this.storage.remove(learningModID + 'previousQuizAttemptPoints');\n    this.storage.remove(learningModID + 'currentQuizPoints');\n    this.storage.remove(learningModID + 'beenViewed');\n    this.storage.remove(learningModID + 'storedPrevUV');\n    this.storage.remove(learningModID + 'storedCurrentUV');\n    this.storage.remove(learningModID + 'localUVStoreDate');\n  }\n\n  isHighlight(learningMod) {\n    if (this.highlightID) {\n      return this.highlightID == learningMod.id;\n    }\n  }\n\n};\nLearningCenterPage = __decorate([Component({\n  selector: 'app-learning-center',\n  templateUrl: './learning-center.page.html',\n  styleUrls: ['./learning-center.page.scss']\n}), __metadata(\"design:paramtypes\", [Router, Storage, LearningModuleService, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, AnalyticsService, ActivatedRoute])], LearningCenterPage);\nexport { LearningCenterPage };","map":null,"metadata":{},"sourceType":"module"}