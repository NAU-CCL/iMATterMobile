{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ChatService } from '../services/chat/chat-service.service';\nimport { DocumentChangeAction } from '@angular/fire/firestore';\nimport { Storage } from '@ionic/storage';\nimport { Router, Event, NavigationEnd } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/chat/chat-service.service\";\nimport * as i2 from \"@ionic/storage\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/common\";\n\nfunction GlobalChatNotificationsComponent_ng_container_0_div_1_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \"Tap to Enter Chat\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GlobalChatNotificationsComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2, 3)(2, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function GlobalChatNotificationsComponent_ng_container_0_div_1_Template_div_click_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n\n      const _r5 = i0.ɵɵreference(1);\n\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.navigateUserToChat(_r5));\n    });\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"div\", 6);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, GlobalChatNotificationsComponent_ng_container_0_div_1_div_8_Template, 2, 0, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 9);\n    i0.ɵɵlistener(\"click\", function GlobalChatNotificationsComponent_ng_container_0_div_1_Template_div_click_9_listener() {\n      i0.ɵɵrestoreView(_r8);\n\n      const _r5 = i0.ɵɵreference(1);\n\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.removeJoinedChatNotif(_r5));\n    });\n    i0.ɵɵelement(10, \"ion-icon\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    const i_r2 = ctx_r10.index;\n    const chat_r1 = ctx_r10.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"margin-top\", i_r2 * 2 + \"px\")(\"animation-duration\", ctx_r3.autoChatLifeSpan + \"s\");\n    i0.ɵɵattribute(\"id\", \"chat-\" + i_r2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(chat_r1.username);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"has \", chat_r1.type, \" the chatroom.\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.userIsInChat);\n  }\n}\n\nfunction GlobalChatNotificationsComponent_ng_container_0_div_2_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \"Tap to Enter Chat\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GlobalChatNotificationsComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2, 3)(2, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function GlobalChatNotificationsComponent_ng_container_0_div_2_Template_div_click_2_listener() {\n      i0.ɵɵrestoreView(_r14);\n\n      const _r11 = i0.ɵɵreference(1);\n\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.navigateUserToChat(_r11));\n    });\n    i0.ɵɵelementStart(3, \"div\", 5)(4, \"div\", 6);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, GlobalChatNotificationsComponent_ng_container_0_div_2_div_8_Template, 2, 0, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 9);\n    i0.ɵɵlistener(\"click\", function GlobalChatNotificationsComponent_ng_container_0_div_2_Template_div_click_9_listener() {\n      i0.ɵɵrestoreView(_r14);\n\n      const _r11 = i0.ɵɵreference(1);\n\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.removeJoinedChatNotif(_r11));\n    });\n    i0.ɵɵelement(10, \"ion-icon\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    const i_r2 = ctx_r16.index;\n    const chat_r1 = ctx_r16.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"margin-top\", i_r2 * 2 + \"px\")(\"animation-duration\", ctx_r4.autoChatLifeSpan + \"s\");\n    i0.ɵɵattribute(\"id\", \"chat-\" + i_r2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(chat_r1.username);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", chat_r1.message, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.userIsInChat);\n  }\n}\n\nfunction GlobalChatNotificationsComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, GlobalChatNotificationsComponent_ng_container_0_div_1_Template, 11, 8, \"div\", 1);\n    i0.ɵɵtemplate(2, GlobalChatNotificationsComponent_ng_container_0_div_2_Template, 11, 8, \"div\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", chat_r1.type === \"entered\" || chat_r1.type === \"left\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", chat_r1.type === \"emotion\");\n  }\n}\n\nexport let GlobalChatNotificationsComponent = /*#__PURE__*/(() => {\n  class GlobalChatNotificationsComponent {\n    constructor(chatService, storage, router) {\n      this.chatService = chatService;\n      this.storage = storage;\n      this.router = router;\n      this.currentAutoChats = [];\n      this.autoChatArrayLen = 0;\n      this.chatURL = \"/tabs/chat\";\n    }\n\n    ngOnInit() {\n      // Subscribe to the observable which emits new auto chats.\n      // and get the current userCode\n      this.initializeChatNotifs(); // Function that subscribes to router events so we know what page the user is looking at at all times.\n\n      this.watchForRouterEvents();\n    }\n\n    watchForRouterEvents() {\n      this.router.events.subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          // Hide progress spinner or progress bar\n          this.currentRoute = event.url; // /tabs/chat is what we want.      \n\n          console.log(`The current url is ${event}`);\n\n          if (this.currentRoute === this.chatURL) {\n            console.log(`User is in chat room now.`);\n            this.userIsInChat = true;\n          } else {\n            this.userIsInChat = false;\n          }\n        }\n      });\n    } // Take an auto chat document and add it to an array of auto chats to display as notifications.\n    /// User code is loaded before this is ever called.\n\n\n    displayAutoChat(newAutoChat) {\n      if (this.userCode != newAutoChat.userID && this.currentAutoChats.length <= this.maxOnScreenAutoChats) {\n        this.currentAutoChats.push(newAutoChat);\n        console.log(`Pushing new auto chat ${JSON.stringify(newAutoChat)}`);\n        setTimeout(() => {\n          // Remove the first item in the array after whatever number of seconds are set in the admin website.\n          // Auto chats animate themselves on screen but we dont want to waste time rendering them if theyre invisible so we\n          // need to deleete them when the leave screen animation has completed.\n          this.currentAutoChats.shift();\n        }, this.autoChatLifeSpan * 1000 + 200);\n      }\n    } // Delete a chat from the chat array, is subsequently removed from the DOM.\n\n\n    removeJoinedChatNotif(autoChatElement) {\n      // Change the animation attributes of the element to animate it leaving the screen when the user closes it.\n      autoChatElement.style.animationName = 'close-message';\n      autoChatElement.style.animationTimingFunction = 'ease-out';\n      autoChatElement.style.animationFillMode = 'forwards';\n      autoChatElement.style.animationDuration = '.25s';\n      setTimeout(() => {\n        // Remove the chat from the auto chat array. The chat at the end \n        // of the array is always the one being clicked so we can use pop to remove it.\n        this.currentAutoChats.pop();\n      }, 550);\n    }\n\n    calculateTopMargin() {\n      console.log(`${this.autoChatArrayLen}px`);\n      return `${this.autoChatArrayLen}px`;\n    }\n\n    initializeChatNotifs() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(`Getting user code and waiting`);\n        yield this.storage.get('userCode').then(userCode => {\n          this.userCode = userCode;\n        });\n        let chatSettingsDoc = yield this.chatService.getAutoChatSettings();\n        console.log(`Getting auto chat settings and waiting`);\n        yield chatSettingsDoc.get().then(docSnap => {\n          let chatSettingsObject = docSnap.data();\n          console.log(`SETTINGS OBJECT ${JSON.stringify(chatSettingsObject)}`); // How long to show an auto chat before it auto disappears. Convert to milliseconds by multiplying by 1000\n          // Add extra 200 milliseconds to ensure that animation finished running before chat is removed.\n\n          this.autoChatLifeSpan = chatSettingsObject.autoChatLifeSpanInSeconds;\n          this.maxOnScreenAutoChats = chatSettingsObject.maxAutoChatsOnScreen;\n        });\n        console.log(`Finished getting auto chat settings. Time out${this.autoChatLifeSpan} max onsc ${this.maxOnScreenAutoChats}`);\n        console.log(`User code got`);\n        console.log(`subscribing to auto chats.`); // Get an observable of auto chats from the chat service.\n\n        this.autoChatsObs = this.chatService.getAutoChats();\n        this.autoChatsObs.subscribe(autoChatDocChangeActionArray => {\n          autoChatDocChangeActionArray.forEach(autoChatDocChangeAction => {\n            // Payload is an angular firestore property as is the document change action array type. Payload is a property of document change action.\n            // getAutoChats returns an observable that emits a DocumentChangeActionArray, we then call foreach on that array to get individual DocumentChangeActions which contains two properties,\n            // payload and type. Payload returns a DocumentChange object which is a type that is original to firestore. ie read google firestore documentation for DocumentChange information as it works the same in angular.\n            // For information on DocumentChangeAction and DocumentChangeActionArray read the documentation found in the angular fire git repository. There is a doc folder in that repository with another folder called firestore\n            // which contains the documentation you need.\n            this.displayAutoChat(autoChatDocChangeAction.payload.doc.data());\n          });\n        });\n      });\n    }\n\n    navigateUserToChat(autoChatElement) {\n      // If the user is not already in the chat room, navigate them to it.\n      if (this.currentRoute != this.chatURL) {\n        this.removeJoinedChatNotif(autoChatElement);\n        this.router.navigateByUrl(this.chatURL);\n      } else {\n        this.removeJoinedChatNotif(autoChatElement);\n      }\n    }\n\n  }\n\n  GlobalChatNotificationsComponent.ɵfac = function GlobalChatNotificationsComponent_Factory(t) {\n    return new (t || GlobalChatNotificationsComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.Storage), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  GlobalChatNotificationsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GlobalChatNotificationsComponent,\n    selectors: [[\"app-global-chat-notifications\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [\"class\", \"chat-notif-style\", 3, \"margin-top\", \"animation-duration\", 4, \"ngIf\"], [1, \"chat-notif-style\"], [\"autoNotif\", \"\"], [1, \"main-chat-notif-area\", 3, \"click\"], [1, \"center-text\"], [1, \"user-name-text-box\"], [2, \"display\", \"inline-block\"], [\"class\", \"sub-text\", 4, \"ngIf\"], [1, \"chat-notif-close\", 3, \"click\"], [\"name\", \"close\", 2, \"color\", \"white\", \"font-size\", \"20px\"], [1, \"sub-text\"]],\n    template: function GlobalChatNotificationsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, GlobalChatNotificationsComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.currentAutoChats);\n      }\n    },\n    dependencies: [i4.IonIcon, i5.NgForOf, i5.NgIf],\n    styles: [\".chat-notif-style[_ngcontent-%COMP%]{position:absolute;left:10%;background-color:#1a5773;border:1px solid #888a91;border-radius:8px;opacity:.8;text-align:center;width:80%;color:#fff;-webkit-animation-name:fade-auto-msg;animation-name:fade-auto-msg;-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-duration:6s;animation-duration:6s;display:flex;flex-direction:row;justify-content:space-between;height:55px;font-size:14px}.main-chat-notif-area[_ngcontent-%COMP%]{flex-shrink:0;flex-grow:1;margin-left:6px;margin-right:6px;width:80%;display:flex;justify-content:center;flex-direction:column}.chat-notif-close[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;background-color:red;border-top-right-radius:8px;border-bottom-right-radius:8px;width:20%}.center-text[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center}.no-margins[_ngcontent-%COMP%]{margin:0}@-webkit-keyframes fade-auto-msg{0%{opacity:1;top:-5%}10%{opacity:1;top:5%}80%{opacity:1;top:5%}to{opacity:0;top:-5%}}@keyframes fade-auto-msg{0%{opacity:1;top:-5%}10%{opacity:1;top:5%}80%{opacity:1;top:5%}to{opacity:0;top:-5%}}@-webkit-keyframes close-message{0%{opacity:1;top:5%}to{opacity:0;top:-5%}}@keyframes close-message{0%{opacity:1;top:5%}to{opacity:0;top:-5%}}.sub-text[_ngcontent-%COMP%]{font-size:10px}.user-name-text-box[_ngcontent-%COMP%]{display:inline-block;max-width:170px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\"]\n  });\n  return GlobalChatNotificationsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}