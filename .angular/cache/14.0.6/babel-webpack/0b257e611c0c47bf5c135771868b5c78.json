{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { QuestionService } from '../../services/infoDesk/question.service';\nimport { DatePipe } from '@angular/common';\nlet ViewableProfilePage = class ViewableProfilePage {\n  constructor(afs, activatedRoute, questionService, router, storage, datePipe) {\n    this.afs = afs;\n    this.activatedRoute = activatedRoute;\n    this.questionService = questionService;\n    this.router = router;\n    this.storage = storage;\n    this.datePipe = datePipe;\n    this.user = {\n      code: '',\n      username: '',\n      email: '',\n      password: '',\n      dueDate: '',\n      endRehabDate: '',\n      location: 0,\n      weeksPregnant: '',\n      availableSurveys: [],\n      daysPregnant: '',\n      totalDaysPregnant: '',\n      cohort: '',\n      bio: '',\n      securityQ: '',\n      securityA: '',\n      currentEmotion: '',\n      profilePic: '',\n      joined: '',\n      daysAUser: 0,\n      points: 0,\n      chatNotif: true,\n      learningModNotif: true,\n      surveyNotif: true,\n      infoDeskNotif: true,\n      token: '',\n      recentNotifications: [],\n      answeredSurveys: [],\n      joinedChallenges: [],\n      completedChallenges: [],\n      codeEntered: true,\n      dailyQuote: '',\n      autoLogin: false\n    };\n    this.provider = {\n      code: '',\n      username: '',\n      nameFirst: '',\n      nameLast: '',\n      email: '',\n      password: '',\n      profilePic: '',\n      dob: '',\n      bio: '',\n      type: '',\n      providerType: ''\n    };\n    this.emotionIcons = {\n      excited: '🤗',\n      happy: '😃',\n      loved: '🥰',\n      indifferent: '😐',\n      overwhelmed: '😩',\n      sad: '😢',\n      angry: '😡'\n    };\n    this.userProfileID = this.activatedRoute.snapshot.paramMap.get('id');\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.storage.get('currentLoc').then(val => {\n      if (val) {\n        this.currentLoc = val;\n      }\n    });\n\n    if (this.currentLoc === 'chat') {\n      this.storage.get('currentCohort').then(val => {\n        if (val) {\n          this.currentCohort = val;\n        }\n      });\n    } else {\n      this.storage.get('currentPost').then(val => {\n        if (val) {\n          this.currentPost = val;\n        }\n      });\n    }\n\n    let ref = this.afs.firestore.collection('users');\n    ref.where('code', '==', this.userProfileID).get().then(snapshot => {\n      if (snapshot.docs.length > 0) {\n        const userRef = ref.where('code', '==', this.userProfileID);\n        userRef.get().then(result => {\n          result.forEach(doc => {\n            this.userType = 'user';\n            this.user.username = doc.get('username');\n            console.log(this.user.username);\n            this.user.bio = doc.get('bio');\n            this.user.cohort = doc.get('cohort');\n            const date = new Date(doc.get('endRehabDate') + 'T12:00:00');\n            this.user.endRehabDate = this.datePipe.transform(date, 'MMMM d, yyyy');\n            ;\n            this.user.currentEmotion = doc.get('mood');\n            this.user.profilePic = doc.get('profilePic');\n            this.userEmotionIcon = this.getUserEmotionIcon(this.user.currentEmotion);\n          });\n        });\n      } else {\n        ref = this.afs.firestore.collection('providers');\n        ref.where('code', '==', this.userProfileID).get().then(snap => {\n          if (snap.docs.length > 0) {\n            const userRef = ref.where('code', '==', this.userProfileID);\n            userRef.get().then(result => {\n              result.forEach(doc => {\n                this.userType = 'provider';\n                this.provider.username = doc.get('username');\n                this.provider.bio = doc.get('bio');\n                this.provider.profilePic = doc.get('profilePic');\n                this.provider.providerType = doc.get('providerType');\n              });\n            });\n          }\n        });\n      }\n    });\n  }\n  /*\n  let ref = this.afs.firestore.collection('users');\n  console.log(this.userProfileID);\n  ref.where('code', '==', this.userProfileID)\n      .get().then(snapshot => {\n    if (snapshot.docs.length > 0) {\n      ref.get().then((result) => {\n        result.forEach(doc => {\n          this.userType = 'user';\n          this.user.username = doc.get('username');\n          console.log(this.user.username);\n          this.user.weeksPregnant = doc.get('weeksPregnant');\n          this.user.bio = doc.get('bio');\n          this.user.cohort = doc.get('cohort');\n          this.user.currentEmotion = doc.get('mood');\n          this.user.profilePic = doc.get('profilePic');\n        });\n      });\n    } else {\n      ref = this.afs.firestore.collection('providers');\n      ref.where('code', '==', this.userProfileID)\n          .get().then(snap => {\n        if (snap.docs.length > 0) {\n          ref.get().then((result) => {\n            result.forEach(doc => {\n              this.userType = 'provider';\n              this.provider.username = doc.get('username');\n              this.provider.bio = doc.get('bio');\n              this.provider.profilePic = doc.get('profilePic');\n            });\n          });\n        }\n      });\n    }\n  });*/\n\n\n  ionViewWillEnter() {}\n\n  getUserEmotionIcon(emotion) {\n    if (emotion === 'excited') {\n      return this.emotionIcons.excited;\n    } else if (emotion === 'happy') {\n      return this.emotionIcons.happy;\n    } else if (emotion === 'loved') {\n      return this.emotionIcons.loved;\n    } else if (emotion === 'indifferent') {\n      return this.emotionIcons.indifferent;\n    } else if (emotion === 'overwhelmed') {\n      return this.emotionIcons.overwhelmed;\n    } else if (emotion === 'sad') {\n      return this.emotionIcons.sad;\n    } else if (emotion === 'angry') {\n      return this.emotionIcons.angry;\n    }\n  }\n\n  goBackToPost() {\n    if (this.currentLoc === '/chat/') {\n      this.router.navigate(['/chat/', this.currentCohort]);\n    } else {\n      this.router.navigate(['/forum/forum-thread/', this.currentPost]);\n    }\n  }\n\n};\nViewableProfilePage = __decorate([Component({\n  selector: 'app-viewable-profile',\n  templateUrl: './viewable-profile.page.html',\n  styleUrls: ['./viewable-profile.page.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ActivatedRoute, QuestionService, Router, Storage, DatePipe])], ViewableProfilePage);\nexport { ViewableProfilePage };","map":null,"metadata":{},"sourceType":"module"}