{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { LoadingController, AlertController, Platform } from '@ionic/angular';\nimport { AuthServiceProvider } from '../../../services/user/auth.service';\nimport { FcmService } from '../../../services/pushNotifications/fcm.service';\nimport { Router } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { BnNgIdleService } from 'bn-ng-idle';\nlet LoginPage = class LoginPage {\n  constructor(loadingCtrl, alertCtrl, authService, router, formBuilder, afs, toastCtrl, storage, fcm, analyticsService, platform, bnIdle) {\n    this.loadingCtrl = loadingCtrl;\n    this.alertCtrl = alertCtrl;\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.afs = afs;\n    this.toastCtrl = toastCtrl;\n    this.storage = storage;\n    this.fcm = fcm;\n    this.analyticsService = analyticsService;\n    this.platform = platform;\n    this.bnIdle = bnIdle;\n    this.analytic = {\n      page: '',\n      userID: '',\n      timestamp: '',\n      sessionID: ''\n    };\n    this.session = {\n      userID: '',\n      LogOutTime: '',\n      LoginTime: '',\n      numOfClickChat: 0,\n      numOfClickCalendar: 0,\n      numOfClickLModule: 0,\n      numOfClickInfo: 0,\n      numOfClickSurvey: 0,\n      numOfClickProfile: 0,\n      numOfClickMore: 0,\n      numOfClickHome: 0\n    };\n    this.loadingGifURL = '../../../../assets/loadingIcon.gif'; // 3 means we dont know if the user is already logged into the app or not, we must wait for our function\n    // to check if the user has credential in local storage. Show white screen while app checks for previous login.\n    // 2 means user does not have loggin credentials on device or User has autoLogin set to false in settings.\n    // 1 means the user has credentials on the device and we will auto log them in.\n\n    this.userAutoLoginSetting = 3;\n    this.showEmailBox = true;\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required, Validators.email])],\n      password: ['', Validators.compose([Validators.required])]\n    });\n  }\n\n  ngOnInit() {\n    console.log(`In login page oninit`);\n  } // This is an ionic method called after a view loads AUTOMAGICALLY.\n  // Metho called right after page load.\n\n\n  ionViewDidEnter() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log('User ion did enter');\n      let autoLoginUser;\n      let isUserAuthenticated = false; // Before we even think about auto logging in the user we need to see if the user is authenticated. If the user is authenticated, their user email and pass\n      // is stored on the device, if authen is false, there is not user info on the device and we cannot auto log in the user. A user has attribute true assigned to authen when they\n      // log in successfully. A users authenticated property is set to false and all user account data is deleted on logout.\n\n      console.log(\"Waiting for get('auth') to return\"); // Add await to force the function to synchronously execute before moving onto next lines of code.\n\n      isUserAuthenticated = (yield this.storage.get('authenticated')) == \"true\";\n      console.log(`Got value from await func, is is: ${isUserAuthenticated} typeof autoLoginUser is ${typeof isUserAuthenticated}`); // If the user is NOT authenticated we cannot auto log them in as not user data exists on the device.\n      // Show the login page.\n\n      if (isUserAuthenticated) {\n        console.log(`Inside main if statement, isUserAuthenticated is: ${typeof isUserAuthenticated}`);\n        let userID = this.storage.get('userCode').then(userCode => {\n          console.log(\"Inside the get user code method gonna be null.\"); // Get a document from a collection. .doc() returns a doc reference! This is an offline operation and does not give you access to the actual doc data.\n          // Call .get().then(function) on the doc reference to actually retrieve the document as a snapshot.\n          // The retrieved document is returned as a document snapshot, which we can then call .get('fieldname') to get the documents field name.\n\n          this.afs.firestore.collection('users').doc(userCode.toString()).get().then(docSnapShot => {\n            // See if user selected auto log me in setting in their profile.\n            autoLoginUser = docSnapShot.get('autoLogin');\n\n            if (autoLoginUser) {\n              // Log in the user automatically if theyre credentials are stored on the device.\n              // This function also changes the value of isUserAlreadyLoggIn which is used to show the login loading animation or NOT.\n              this.autoLoginUser();\n            } else // because autoLoginUser needs to run to show the login page or the login loading animation, we need to manually set the variable to show the login page.\n              {\n                // This var is used in the html template in order to decide whether or not to show the loading animation or the login screen.\n                // If user does not have autoLogin selected then we show the login screen. Num 2 means show login screen. See field declaration for explanation.\n                this.userAutoLoginSetting = 2;\n              }\n          });\n        });\n      } else {\n        // If the user is not authenticated, we cannot automatically log them in to the app.\n        this.userAutoLoginSetting = 2;\n      }\n    });\n  }\n\n  autoLoginUser() {\n    console.log('STORAGE: ' + this.storage.get('email'));\n    this.storage.get('email').then(val => {\n      if (val.toString().length > 1) {\n        this.storageEmail = val;\n        console.log('VAL: ' + val);\n        this.storage.get('authenticated').then(auth => {\n          if (auth.toString().length > 1) {\n            console.log('AUTH: ' + auth);\n            this.storage.get('password').then(pass => {\n              if (pass.toString().length > 1) {\n                if (auth === 'true') {\n                  // User is already authenticated, time to validate their saved credentials.\n                  this.userAutoLoginSetting = 1;\n                  this.validateEmailwithPass(val, pass);\n                } else {\n                  // User is not authenticated, show the user the login screen.\n                  this.userAutoLoginSetting = 2;\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  notificationSetup(userID) {\n    this.fcm.getToken(userID);\n  }\n\n  addSession() {\n    this.analyticsService.addSessionOnAppEnter();\n  } // Used on the login page and called when the user clicks the log in button.\n\n\n  validateUser(loginForm) {\n    this.storage.get('email').then(val => {\n      // if (val) {\n      //     this.email = val.toString();\n      //     this.validateEmailwithPass(val, loginForm.value.password);\n      // } else {\n      this.storage.set('email', loginForm.value.email);\n      this.validateEmailwithPass(loginForm.value.email, loginForm.value.password); // }\n    });\n  }\n\n  validateEmailwithPass(email, pass) {\n    this.afs.firestore.collection('users').where('email', '==', email).get().then(snapshot => {\n      if (snapshot.docs.length > 0) {\n        console.log('exists');\n        this.userEmail = true; // Get a reference to the user with the email saved on the device.\n\n        const userRef = this.afs.firestore.collection('users').where('email', '==', email);\n        userRef.get().then(result => {\n          result.forEach(doc => {\n            this.userID = doc.id;\n            this.userPassword = doc.get('password');\n\n            if (this.userPassword === pass) {\n              if (this.platform.is('android')) {\n                this.storage.set('platform', 'android');\n              } else if (this.platform.is('ios')) {\n                this.storage.set('platform', 'ios');\n              } // IF USER EMAIL AND PASS ON DEVICE MATCH DATABASE, load information into the user object and create a session.\n              // this.storage.set('version', this.device.version);\n\n\n              this.storage.set('userCode', this.userID).then(() => {\n                this.addSession();\n              });\n              this.storage.set('authenticated', 'true');\n              this.storage.set('password', this.userPassword);\n              this.storage.set('username', doc.get('username')); // this.storage.set('dueDate', doc.get('dueDate'));\n\n              this.storage.set('endRehabDate', doc.get('endRehabDate'));\n              this.storage.set('cohort', doc.get('cohort')); // this.storage.set('totalDaysPregnant', doc.get('totalDays'));\n              // this.storage.set('weeksPregnant', doc.get('weeksPregnant'));\n              // this.storage.set('daysPregnant', doc.get('daysPregnant'));\n\n              this.storage.set('totalDaysRecovery', doc.get('totalDays'));\n              this.storage.set('weeksRecovery', doc.get('weeksPregnant'));\n              this.storage.set('daysRecovery', doc.get('daysPregnant'));\n              this.storage.set('daysSinceLogin', doc.get('daysSinceLogin')); // update users days since last login to 0\n\n              this.afs.firestore.collection('users').doc(this.userID).update({\n                daysSinceLogin: 0\n              }); // get and save token\n\n              this.notificationSetup(this.userID);\n              this.router.navigate(['/tabs/home/']);\n              this.loginForm.reset();\n            } else {\n              this.showToast('Password is incorrect'); // Show loging screen in case this func fails to log user in\n\n              this.userAutoLoginSetting = 2;\n            }\n          });\n        });\n      } else {\n        console.log('Email does not exist');\n        this.showToast('Email is incorrect');\n        this.userEmail = false; // Show loging screen in case this func fails to log user in\n\n        this.userAutoLoginSetting = 2;\n      }\n    });\n  } // Delete user information when logging them out.\n\n\n  logOut() {\n    this.analyticsService.endSessionOnAppExit();\n    this.storage.set('authenticated', 'false');\n    this.storage.remove('userCode');\n    this.storage.remove('email');\n    this.storage.remove('password'); // this.storage.remove('totalDaysPregnant');\n    // this.storage.remove('weeksPregnant');\n    // this.storage.remove('daysPregnant');\n\n    this.storage.remove('totalDaysRecovery');\n    this.storage.remove('weeksRecovery');\n    this.storage.remove('daysRecovery');\n    this.router.navigateByUrl('login');\n  }\n\n  showToast(msg) {\n    this.toastCtrl.create({\n      message: msg,\n      duration: 2000\n    }).then(toast => toast.present());\n  }\n\n};\nLoginPage = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n}), __metadata(\"design:paramtypes\", [LoadingController, AlertController, AuthServiceProvider, Router, FormBuilder, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ToastController, Storage, FcmService, AnalyticsService, Platform, BnNgIdleService])], LoginPage);\nexport { LoginPage };","map":null,"metadata":{},"sourceType":"module"}