{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { LoadingController, AlertController } from '@ionic/angular';\nimport { AuthServiceProvider } from '../../../services/user/auth.service';\nimport { Router } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { ProfileService } from '../../../services/user/profile.service';\nlet RecoveryCodePage = class RecoveryCodePage {\n  constructor(loadingCtrl, alertCtrl, authService, router, formBuilder, afs, toastCtrl, storage, profileService) {\n    this.loadingCtrl = loadingCtrl;\n    this.alertCtrl = alertCtrl;\n    this.authService = authService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.afs = afs;\n    this.toastCtrl = toastCtrl;\n    this.storage = storage;\n    this.profileService = profileService;\n    this.enterCodeForm = this.formBuilder.group({\n      recoveryCode: ['', Validators.compose([Validators.required])],\n      recoveryPassword: ['', Validators.compose([Validators.required, Validators.minLength(8)])]\n    });\n  }\n\n  ngOnInit() {}\n\n  showToast(msg) {\n    this.toastCtrl.create({\n      message: msg,\n      duration: 2000\n    }).then(toast => toast.present());\n  }\n\n  validateUser(enterCodeForm) {\n    this.recoveryCode = enterCodeForm.value.recoveryCode;\n    this.recoveryPassword = enterCodeForm.value.recoveryPassword;\n    var recoveryEmail;\n    var theCode;\n    console.log(\"1\");\n    console.log(this.recoveryCode);\n    console.log(\"recoveryEmail\");\n    console.log(this.recoveryPassword.toString()); //const newPassword: string = this.recoveryPassword;\n\n    let newPassword = this.enterCodeForm.controls['recoveryPassword'].value;\n    console.log(newPassword);\n    this.afs.firestore.collection('recoveryEmail').where('code', '==', this.recoveryCode).get().then(snapshot => {\n      if (snapshot.docs.length > 0) {\n        console.log('exists');\n        const recoveryRef = this.afs.firestore.collection('recoveryEmail');\n        recoveryRef.get().then(result => {\n          result.forEach(doc => {\n            this.userID = doc.id;\n            this.theCode = doc.get('code');\n\n            if (this.theCode === this.recoveryCode) {\n              recoveryEmail = doc.get('email');\n              this.afs.firestore.collection('recoveryEmail').doc(doc.id).update({\n                code: \"\",\n                email: \"\"\n              });\n              console.log(recoveryEmail);\n              console.log(\"5\");\n            } else {}\n          });\n        });\n        const userRef = this.afs.firestore.collection('users');\n        userRef.get().then(result => {\n          result.forEach(doc => {\n            this.userID = doc.id;\n            this.userEmail = doc.get('email');\n            this.password = doc.get('password');\n\n            if (this.userEmail === recoveryEmail) {\n              this.wantedUserID = this.userID;\n              console.log(newPassword);\n              this.afs.firestore.collection('users').doc(this.wantedUserID).update({\n                password: newPassword\n              });\n              this.showToast('Password has been changed!');\n              this.router.navigate(['/login/']);\n            } else {}\n          });\n        });\n      } else {\n        this.showToast('Code invalid');\n        console.log('Email does not exist');\n        this.userEmail = false;\n      }\n    });\n  }\n\n};\nRecoveryCodePage = __decorate([Component({\n  selector: 'app-recovery-code',\n  templateUrl: './recovery-code.page.html',\n  styleUrls: ['./recovery-code.page.scss']\n}), __metadata(\"design:paramtypes\", [LoadingController, AlertController, AuthServiceProvider, Router, FormBuilder, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ToastController, Storage, ProfileService])], RecoveryCodePage);\nexport { RecoveryCodePage };","map":null,"metadata":{},"sourceType":"module"}