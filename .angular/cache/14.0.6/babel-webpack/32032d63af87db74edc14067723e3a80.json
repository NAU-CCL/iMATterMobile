{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Storage } from '@ionic/storage';\nimport { FcmService } from \"../../../services/pushNotifications/fcm.service\";\nimport { ProfileService } from \"../../../services/user/profile.service\";\nlet SettingsPage = class SettingsPage {\n  constructor(afs, storage, fcm, profileService) {\n    //this.profileService.updateAutoLogin( autoLogInUser, this.userProfileID );\n    this.afs = afs;\n    this.storage = storage;\n    this.fcm = fcm;\n    this.profileService = profileService;\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            //chat notification\n            if (doc.get('chatNotif') === false) {\n              this.chatNotif = false;\n            } else {\n              this.chatNotif = true;\n            } //learning module notification\n\n\n            if (doc.get('learningModNotif') === false) {\n              this.learningModNotif = false;\n            } else {\n              this.learningModNotif = true;\n            } //survey notification\n\n\n            if (doc.get('surveyNotif') === false) {\n              this.surveyNotif = false;\n            } else {\n              this.surveyNotif = true;\n            } //infoDesk notification\n\n\n            if (doc.get('infoDeskNotif') === false) {\n              this.infoDeskNotif = false;\n            } else {\n              this.infoDeskNotif = true;\n            } // Auto log in setting\n\n\n            if (doc.get('autoLogin') === false) {\n              this.autoLogin = false;\n            } else {\n              this.autoLogin = true;\n            }\n          });\n        });\n      }\n    });\n  }\n\n  ngOnInit() {}\n\n  setChatNotification(notifSetting) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if (notifSetting === false) {\n              this.afs.firestore.collection('users').doc(val).update({\n                chatNotif: false\n              });\n            } else {\n              this.afs.firestore.collection('users').doc(val).update({\n                chatNotif: true\n              });\n              this.notificationSetup(val);\n            }\n          });\n        });\n      }\n    });\n  }\n\n  notificationSetup(userID) {\n    console.log(userID);\n    this.fcm.getToken(userID);\n  }\n\n  setLearningModuleNotification(notifSetting) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if (notifSetting === false) {\n              this.afs.firestore.collection('users').doc(val).update({\n                learningModNotif: false\n              });\n            } else {\n              this.afs.firestore.collection('users').doc(val).update({\n                learningModNotif: true\n              });\n              this.notificationSetup(val);\n            }\n          });\n        });\n      }\n    });\n  }\n\n  setSurveyNotification(notifSetting) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if (notifSetting === false) {\n              this.afs.firestore.collection('users').doc(val).update({\n                surveyNotif: false\n              });\n            } else {\n              this.afs.firestore.collection('users').doc(val).update({\n                surveyNotif: true\n              });\n              this.notificationSetup(val);\n            }\n          });\n        });\n      }\n    });\n  }\n\n  setInfoDeskNotification(notifSetting) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            if (notifSetting === false) {\n              this.afs.firestore.collection('users').doc(val).update({\n                infoDeskNotif: false\n              });\n            } else {\n              this.afs.firestore.collection('users').doc(val).update({\n                infoDeskNotif: true\n              });\n              this.notificationSetup(val);\n            }\n          });\n        });\n      }\n    });\n  }\n\n  setCalendarEventNotificationTime(eventNotificationTime) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            this.afs.firestore.collection('users').doc(val).update({\n              notificationTime: eventNotificationTime\n            });\n          });\n        });\n      }\n    });\n  }\n\n  setClockType(clock) {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.firestore.collection('users').where('code', '==', val).get().then(snapshot => {\n          snapshot.forEach(doc => {\n            this.afs.firestore.collection('users').doc(val).update({\n              clockType: clock\n            });\n          });\n        });\n      }\n    });\n  } // Update the users auto login preference\n\n\n  setAutoLogin() {\n    //console.log(`USER AUTO LOG PREFERNCE WAS CHANGED TO ${this.autoLogin}`);\n    this.storage.get('userCode').then(userID => {\n      this.profileService.updateAutoLogin(this.autoLogin, userID);\n    });\n  }\n\n};\nSettingsPage = __decorate([Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, Storage, FcmService, ProfileService])], SettingsPage);\nexport { SettingsPage };","map":null,"metadata":{},"sourceType":"module"}