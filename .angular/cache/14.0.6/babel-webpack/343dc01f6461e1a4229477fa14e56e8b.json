{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nlet FireService = class FireService {\n  constructor(angularfs) {\n    this.angularfs = angularfs;\n  }\n\n  getSurveyCollection() {\n    // gets the collection of surveys\n    this.surveyCollection = this.angularfs.collection('surveys'); //  looks for changes and updates, also grabs the data\n\n    this.surveys = this.surveyCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }));\n  } // gets all of the surveys in the survey collection\n\n\n  getSurveys() {\n    this.getSurveyCollection();\n    return this.surveys;\n  } // gets an individual survey with id provided\n\n\n  getSurvey(id) {\n    return this.surveyCollection.doc(id).valueChanges().pipe(take(1), map(survey => {\n      survey.id = id;\n      return survey;\n    }));\n  } // updates user's answeredSurveys list\n\n\n  updateAnsweredSurveys(userID, answered) {\n    return this.angularfs.firestore.collection('users').doc(userID).update({\n      answeredSurveys: answered\n    });\n  }\n\n  updateUsers(surveyID, users) {\n    return this.angularfs.firestore.collection('surveys').doc(surveyID).update({\n      userVisibility: users\n    });\n  } // updates user's recentNotifications list\n\n\n  updateRecentNot(userID, recent) {\n    return this.angularfs.firestore.collection('users').doc(userID).update({\n      recentNotifications: recent\n    });\n  }\n\n};\nFireService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object])], FireService);\nexport { FireService };","map":null,"metadata":{},"sourceType":"module"}