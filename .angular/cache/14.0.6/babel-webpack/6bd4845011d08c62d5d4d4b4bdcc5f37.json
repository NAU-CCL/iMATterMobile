{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nimport * as firebase from 'firebase/app';\nimport { ProfileService } from './user/profile.service';\nlet AnalyticsService = class AnalyticsService {\n  constructor(afs, profileService) {\n    this.afs = afs;\n    this.profileService = profileService;\n    this.sessionCollection = this.afs.collection('analyticsSessions');\n    this.sessions = this.sessionCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }));\n    this.analyticsCollection = this.afs.collection('analyticsStorage');\n    this.analytics = this.analyticsCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }));\n  }\n\n  getAllSessions() {\n    return this.sessions;\n  }\n\n  getAllUserPages() {\n    return this.analytics;\n  }\n\n  getSession(id) {\n    return this.sessionCollection.doc(id).valueChanges().pipe(take(1), map(session => {\n      session.id = id;\n      return session;\n    }));\n  }\n\n  getPageViews(sessionID) {\n    this.getAnalyticsStorageCollection(sessionID);\n    return this.analytics;\n  }\n\n  getUniqueUserStorageCollection(userID) {\n    this.UniqueSessionsCollection = this.afs.collection('analyticsStorage', ref => ref.where('userID', '==', userID).orderBy('timestamp'));\n    this.uniqueSessions = this.UniqueSessionsCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }));\n  }\n\n  getUniqueUserStorage(userID) {\n    this.getUniqueUserStorageCollection(userID);\n    return this.uniqueSessions;\n  }\n\n  getAnalyticsStorageCollection(sessionID) {\n    this.analyticsCollection = this.afs.collection('analyticsStorage', ref => ref.where('analyticsStorage', '==', sessionID).orderBy('timestamp'));\n    this.analytics = this.analyticsCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      });\n    }));\n  }\n\n  addView(analytic) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.afs.collection('analyticsStorage').add({\n        page: analytic.page,\n        userID: analytic.userID,\n        sessionID: this.idReference,\n        timestamp: analytic.timestamp\n      });\n    });\n  }\n\n  addSessionOnAppEnter() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(`Adding new user session`);\n      let userID = ''; // Get the user code and then add a new session to the analyticsSessions collection using the user code.\n\n      this.profileService.getCurrentUserCode().then(userDocSnapObs => {\n        userDocSnapObs.subscribe(userCode => {\n          userID = userCode.data().code;\n          console.log(`User code is in analytics service: ${userID}`);\n          let newSessionObj = {\n            userID: userID,\n            LogOutTime: null,\n            LoginTime: new Date(),\n            numOfClickChat: 0,\n            numOfClickCalendar: 0,\n            numOfClickLModule: 0,\n            numOfClickInfo: 0,\n            numOfClickSurvey: 0,\n            numOfClickProfile: 0,\n            numOfClickMore: 0,\n            numOfClickHome: 0\n          };\n          this.afs.collection('analyticsSessions').add(newSessionObj).then(ref => {\n            this.idReference = ref.id;\n            console.log(`User session object id is ${ref.id}`);\n            console.log(`Creating New User session object is  ${JSON.stringify(newSessionObj)}`);\n          });\n        });\n      });\n    });\n  }\n\n  endSessionOnAppExit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(`Ending session, app lost focus.`);\n      this.sessionCollection.doc(this.idReference).update({\n        LogOutTime: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    });\n  }\n\n  updateClicks(pageName) {\n    console.log(`Updating ${pageName} clicks, session object ref is ${this.idReference}`);\n    this.sessionCollection.doc(this.idReference).get().subscribe(docSnap => {\n      let docData = docSnap.data(); // If property exists on document, increment it else, add the field with value of 1 for single click.\n\n      if (docData.hasOwnProperty(pageName)) {\n        docSnap.ref.update({\n          [pageName]: firebase.firestore.FieldValue.increment(1)\n        }).then(() => {\n          this.sessionCollection.doc(this.idReference).get().subscribe(docSnap => {\n            console.log(`The incremeneted session object is now ${JSON.stringify(docSnap.data())}`);\n          });\n        });\n      } else {\n        docSnap.ref.update({\n          [pageName]: 1\n        }).then(() => {\n          this.sessionCollection.doc(this.idReference).get().subscribe(docSnap => {\n            console.log(`The incremeneted session object is now ${JSON.stringify(docSnap.data())}`);\n          });\n        });\n      }\n    });\n  }\n\n};\nAnalyticsService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ProfileService])], AnalyticsService);\nexport { AnalyticsService };","map":null,"metadata":{},"sourceType":"module"}