{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Storage } from '@ionic/storage';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nlet ProfileService = class ProfileService {\n  constructor(afs, storage) {\n    this.afs = afs;\n    this.storage = storage;\n  }\n  /**\n   * The redeem table holds the information required for a user to redeem their points\n   * This function adds a new doc to this collection - which calls a cloud function\n   * that sends an email to the currently listed email. The function: sendGCRequestEmail located in index.js in the functions folder.\n   */\n\n\n  addToRedeemTable(adminEmail, email, username, gcType) {\n    this.afs.firestore.collection('usersPointsRedeem').add({\n      adminEmail: adminEmail,\n      email: email,\n      username: username,\n      gcType: gcType,\n      state: \"new\",\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n  /**\n   * Update the user's email in db, only if their password entered matches the one\n   * currently in the db\n   */\n\n\n  updateEmail(newEmail, password, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.afs.firestore.collection('users').where('code', '==', userID).get().then(snapshot => {\n        snapshot.forEach(doc => {\n          const userPassword = doc.get('password');\n\n          if (userPassword === password) {\n            return this.afs.firestore.collection('users').doc(userID).update({\n              email: newEmail\n            });\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Update the user's password in db, only if their old password entered matches the one\n   * currently in the db\n   */\n\n\n  updatePassword(newPassword, oldPassword, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.afs.firestore.collection('users').where('code', '==', userID).get().then(snapshot => {\n        snapshot.forEach(doc => {\n          const userPassword = doc.get('password');\n\n          if (userPassword === oldPassword) {\n            return this.afs.firestore.collection('users').doc(userID).update({\n              password: newPassword\n            });\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Update the user's location in db\n   */\n\n\n  updateLocation(newLocation, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.afs.firestore.collection('users').doc(userID).update({\n        location: newLocation\n      });\n    });\n  }\n  /**\n   * Update the user's bio in db\n   */\n\n\n  updateBio(newBio, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.afs.firestore.collection('users').doc(userID).update({\n        bio: newBio\n      });\n    });\n  }\n  /**\n   * Update the user's bio in db\n   */\n\n\n  updateRecoveryDate(newDate, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.afs.firestore.collection('users').doc(userID).update({\n        endRehabDate: newDate\n      });\n    });\n  }\n  /**\n   * Update the user's bio in db\n   */\n\n\n  updateProfilePic(newPic, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(`USER ID IS ${userID}`);\n      return this.afs.firestore.collection('users').doc(userID).update({\n        profilePic: newPic\n      });\n    });\n  }\n  /**\n  * Update the users auto login preference.\n  */\n\n\n  updateAutoLogin(autoLogPref, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.afs.firestore.collection('users').doc(userID).update({\n        autoLogin: autoLogPref\n      });\n    });\n  }\n  /**\n   * Update the number of points a user has after they redeem points\n   */\n\n\n  updatePoints(currentPointTotal, pointsUsed, userID) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const newPointTotal = currentPointTotal - pointsUsed;\n      return this.afs.firestore.collection('users').doc(userID).update({\n        points: newPointTotal\n      });\n    });\n  }\n  /**\n   * Update the number of points a user has\n   * Not called updatePoints because that's for redeeming points\n   */\n\n\n  editRewardPoints(newPointValue, userID) {\n    return this.afs.firestore.collection('users').doc(userID).update({\n      points: newPointValue\n    });\n  }\n\n  updateAvailableSurveys(newAvailableSurveys, userID) {\n    return this.afs.firestore.collection('users').doc(userID).update({\n      availableSurveys: newAvailableSurveys\n    });\n  }\n\n  getCurrentUserCode() {\n    return this.storage.get('userCode').then(val => {\n      console.log(`In profile service, user code is ${val}`);\n      return this.afs.collection('users').doc(val).get();\n    });\n  }\n\n};\nProfileService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, Storage])], ProfileService);\nexport { ProfileService };","map":null,"metadata":{},"sourceType":"module"}