{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nimport { Storage } from '@ionic/storage';\nimport * as firebase from 'firebase/app';\nlet QuestionService = class QuestionService {\n  constructor(afs, storage) {\n    this.afs = afs;\n    this.storage = storage;\n  }\n\n  getQuestionCollection() {\n    this.questionCollection = this.afs.collection('questions', ref => ref.orderBy('timestamp', 'desc')); // this.commentCollection = this.afs.collection<Comment>('comments');\n\n    this.questions = this.questionCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        data.id = a.payload.doc.id;\n        return data;\n      });\n    }));\n  }\n\n  getQuestions() {\n    this.getQuestionCollection();\n    return this.questions;\n  }\n\n  getThisUsersQuestionCollection(userID) {\n    this.thisUsersQsCollection = this.afs.collection('questions', reference => reference.where('userID', '==', userID).orderBy('timestamp', 'desc')); // this.commentCollection = this.afs.collection<Comment>('comments');\n\n    this.thisUsersQuestions = this.thisUsersQsCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        data.id = a.payload.doc.id;\n        return data;\n      });\n    }));\n  }\n\n  getThisUsersQuestions(userID) {\n    this.getThisUsersQuestionCollection(userID);\n    return this.thisUsersQuestions;\n  }\n\n  getAnswers(questionID) {\n    this.getAnswerCollection(questionID);\n    return this.answers;\n  }\n\n  getAnswerCollection(questionID) {\n    this.answerCollection = this.afs.collection('answers', ref => ref.where('questionID', '==', questionID).orderBy('timestamp'));\n    console.log(this.answerCollection);\n    this.answers = this.answerCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        data.id = a.payload.doc.id;\n        return data;\n      });\n    }));\n  }\n\n  getQuestion(id) {\n    return this.questionCollection.doc(id).valueChanges().pipe(take(1), map(question => {\n      question.id = id; // this.getComments(question.id);\n\n      return question;\n    }));\n  }\n\n  addQuestion(question) {\n    return this.questionCollection.add(question);\n  }\n\n  updateQuestion(question) {\n    return this.questionCollection.doc(question.id).update({\n      title: question.title,\n      description: question.description\n    });\n  }\n\n  deleteQuestion(id) {\n    return this.questionCollection.doc(id).delete();\n  }\n\n  addAnswer(answer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.afs.firestore.collection('questions').doc(answer.questionID).update({\n        numOfAnswers: firebase.firestore.FieldValue.increment(1)\n      });\n      this.afs.collection('answers').add({\n        username: answer.username,\n        input: answer.input,\n        questionID: answer.questionID,\n        userID: answer.userID,\n        timestamp: answer.timestamp,\n        profilePic: answer.profilePic,\n        anon: answer.anon\n      });\n    });\n  }\n\n};\nQuestionService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, Storage])], QuestionService);\nexport { QuestionService };","map":null,"metadata":{},"sourceType":"module"}