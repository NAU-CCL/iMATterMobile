{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { ChatService } from '../../services/chat/chat-service.service';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport { IonContent } from '@ionic/angular';\nimport { Plugins } from '@capacitor/core';\nimport 'rxjs-compat/add/observable/timer';\nconst {\n  PushNotifications\n} = Plugins;\nlet ChatPage = class ChatPage {\n  constructor(_zone, router, storage, chatService, afs, analyticsService) {\n    this._zone = _zone;\n    this.router = router;\n    this.storage = storage;\n    this.chatService = chatService;\n    this.afs = afs;\n    this.analyticsService = analyticsService;\n    this.cohort = {\n      name: ''\n    };\n    this.chat = {\n      cohort: '',\n      username: '',\n      userID: '',\n      timestamp: '',\n      message: '',\n      profilePic: '',\n      type: '',\n      visibility: true,\n      count: 0\n    };\n    this.analytic = {\n      page: '',\n      userID: '',\n      timestamp: '',\n      sessionID: ''\n    };\n    this.storage.get('cohort').then(val => {\n      if (val) {\n        this.cohortChat = val; //this.chats = this.chatService.getChats(val);\n      } // Get new chats. Get chats that were added to the firestore db after the user entered the chat.\n\n\n      this.chats = this.chatService.getNewChats(this.cohortChat); //this.chatService.createTestChats();\n\n      this.scrollToBottom();\n    }); // Event that is suppose to fire when the user leaves to their homescreen.\n\n    document.addEventListener('pause', () => {\n      this.addAutoChat('left');\n    }, false); // Event that fires when user opens app after leaving app previously.\n\n    document.addEventListener('resume', () => {\n      this.addAutoChat('entered');\n    }, false); //this.chatService.deleteAllAutoChats();\n\n    console.log(`The active view is: ${this.router.url}`);\n  }\n\n  ngOnInit() {\n    this.chatService.initChatServce('chats', 'timestamp');\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.userProfileID = this.storage.get('userCode');\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.userProfileID = val;\n      }\n    });\n  } // Runs after the component has been rendered. Safe to manipulate DOM inside \n  // this method although you should avoid direct DOM access if possible.\n\n\n  ngAfterViewInit() {}\n\n  ionViewDidEnter() {\n    this.scrollToBottom();\n    this.addView(); // Add an auto chat to signify that a user entered the chat room\n\n    this.addAutoChat('entered');\n  } // Loads chats from before the user joined this chat.\n\n\n  loadOlderChats(event) {\n    this.chatService.more(); // Chats load very fast so the loading animation is hardly visible on pull down.\n\n    this.chatService.loadingChatsObs.subscribe(loadingChats => {\n      console.log(`Returning done loading ${loadingChats}`);\n\n      if (!loadingChats) {\n        event.target.complete();\n      }\n    });\n  } // Notify the chat when the user goes to home screen ie 'user has left chat, user has rejoined chat.'\n\n\n  userWentHomeChatNotify(enteredOrLeft) {\n    // Get the current url of the app. If we dont check urls then the chat will be notified every single\n    // time the user enters or leaves the app regardless of if the user was in the chat.\n    let currentURL = this.router.url;\n\n    if (currentURL == \"/tabs/chat/default\") {// Add code to create auto chat here.\n    }\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      if (this.content.scrollToBottom) {\n        this.content.scrollToBottom(100);\n      }\n    }, 500);\n  }\n\n  getCohort() {\n    this.storage.get('cohort').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('cohorts').where('name', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.cohort.name = doc.get('name');\n          });\n        });\n      }\n    });\n  }\n\n  toDate(timestamp) {\n    // .toDate is a method of the Timestamp class. Firebase timestamps are returned as Timestamp objects.\n    return timestamp.toDate();\n  }\n\n  addChat(chatType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.chat.cohort = this.cohortChat;\n      this.storage.get('userCode').then(val => __awaiter(this, void 0, void 0, function* () {\n        if (val) {\n          const ref = this.afs.firestore.collection('users').where('code', '==', val);\n          ref.get().then(result => __awaiter(this, void 0, void 0, function* () {\n            result.forEach(doc => __awaiter(this, void 0, void 0, function* () {\n              this.chat.userID = val;\n              this.chat.username = doc.get('username');\n              this.chat.profilePic = doc.get('profilePic');\n              this.chat.timestamp = new Date();\n              this.chat.visibility = true;\n              this.chat.type = 'user';\n              console.log(`Adding chat from component: Message for chat is ${this.chat.message}`); // Await this line becaue if we dont, this function will execute in the background and then we will immediately set this.chat.message = '' \n              // which changes the object reference and basically deletes the message before the service can add the chat to the db.\n\n              yield this.chatService.addChat(this.chat);\n              console.log(`Passed chat service addChat call`); // Chat.message is changed everytime someone enters the new message field on the chat room page. \n              // This line resets the new chat box to empty to after the message is sent the old message is removed.\n\n              this.chat.message = '';\n            }));\n          }));\n        }\n      }));\n      this.scrollToBottom();\n    });\n  }\n\n  goToProfile(userID, cohort) {\n    this.router.navigate(['/viewable-profile/', userID]);\n    this.storage.set('currentCohort', cohort);\n    this.storage.set('currentLoc', '/chat/');\n  }\n\n  addView() {\n    // this.analytic.sessionID = this.session.id;\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.analytic.page = 'chat';\n            this.analytic.userID = val;\n            this.analytic.timestamp = firebase.firestore.FieldValue.serverTimestamp(); // this.analytic.sessionID = this.idReference;\n\n            this.analyticsService.addView(this.analytic).then(() => {\n              console.log('successful added view: chat');\n            }, err => {\n              console.log('unsucessful added view: chat');\n            });\n          });\n        });\n      }\n    });\n  }\n\n  removeJoinedChatNotif(autoNotifEl) {\n    autoNotifEl.remove();\n  } // Create a new chat object to add to the autoChat collection. Called each time user \n  // enters or leaves the chatroom.\n\n\n  addAutoChat(enteredChat) {\n    // Get the user code from storage and then query the datbase for the correct user document.\n    console.log(`adding auto chat`);\n    this.storage.get('userCode').then(currentUserCode => {\n      if (currentUserCode) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', currentUserCode);\n        ref.get().then(querySnap => {\n          querySnap.forEach(docSnap => {\n            // get a js object representing the user document.\n            let userDocObject = docSnap.data();\n            let newChat = {\n              cohort: 'default',\n              userID: userDocObject.code,\n              message: `${userDocObject.username} has ${enteredChat} the chatroom.`,\n              username: userDocObject.username,\n              timestamp: new Date(),\n              visibility: true,\n              type: enteredChat,\n              count: 0\n            };\n            this.chatService.addAutoChat(newChat, currentUserCode);\n          });\n        });\n      }\n    });\n  }\n\n  ionViewWillLeave() {\n    this.addAutoChat('left');\n  }\n\n};\n\n__decorate([ViewChild('content', {\n  static: true\n}), __metadata(\"design:type\", IonContent)], ChatPage.prototype, \"content\", void 0);\n\nChatPage = __decorate([Component({\n  selector: 'app-tab2',\n  templateUrl: 'chat.page.html',\n  styleUrls: ['chat.page.scss']\n}), __metadata(\"design:paramtypes\", [NgZone, Router, Storage, ChatService, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, AnalyticsService])], ChatPage);\nexport { ChatPage };","map":null,"metadata":{},"sourceType":"module"}