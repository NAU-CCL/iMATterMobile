{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\nlet BnNgIdleService = /*#__PURE__*/(() => {\n  class BnNgIdleService {\n    constructor() {\n      this.expired$ = new Subject();\n    }\n\n    startWatching(timeOutSeconds) {\n      this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n      this.timeOutMilliSeconds = timeOutSeconds * 1000;\n      this.idleSubscription = this.idle$.subscribe(res => {\n        this.resetTimer();\n      });\n      this.startTimer();\n      return this.expired$;\n    }\n\n    startTimer() {\n      this.timer$ = timer(this.timeOutMilliSeconds, this.timeOutMilliSeconds).subscribe(res => {\n        this.expired$.next(true);\n      });\n    }\n\n    resetTimer() {\n      this.timer$.unsubscribe();\n      this.startTimer();\n    }\n\n    stopTimer() {\n      this.timer$.unsubscribe();\n      this.idleSubscription.unsubscribe();\n    }\n\n  }\n\n  BnNgIdleService.ɵfac = function BnNgIdleService_Factory(t) {\n    return new (t || BnNgIdleService)();\n  };\n\n  BnNgIdleService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BnNgIdleService,\n    factory: BnNgIdleService.ɵfac,\n    providedIn: 'root'\n  });\n  return BnNgIdleService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BnNgIdleModule = /*#__PURE__*/(() => {\n  class BnNgIdleModule {}\n\n  BnNgIdleModule.ɵfac = function BnNgIdleModule_Factory(t) {\n    return new (t || BnNgIdleModule)();\n  };\n\n  BnNgIdleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BnNgIdleModule\n  });\n  BnNgIdleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [BnNgIdleService],\n    imports: [[]]\n  });\n  return BnNgIdleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of bn-ng-idle\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BnNgIdleModule, BnNgIdleService }; //# sourceMappingURL=bn-ng-idle.mjs.map","map":null,"metadata":{},"sourceType":"module"}