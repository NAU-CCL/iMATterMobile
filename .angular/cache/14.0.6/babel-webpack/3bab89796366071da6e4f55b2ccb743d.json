{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { QuestionService } from 'src/app/services/infoDesk/question.service';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { AnalyticsService } from 'src/app/services/analyticsService.service';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AlertController } from '@ionic/angular';\nlet ForumPage = class ForumPage {\n  constructor(questionService, storage, router, afs, analyticsService, alertController) {\n    this.questionService = questionService;\n    this.storage = storage;\n    this.router = router;\n    this.afs = afs;\n    this.analyticsService = analyticsService;\n    this.alertController = alertController;\n    this.analytic = {\n      page: '',\n      userID: '',\n      timestamp: '',\n      sessionID: ''\n    };\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n    this.storage.get('platform').then(val => {\n      this.iosPlatform = val === 'ios';\n    });\n    this.getUserQuestions();\n    this.getAllQuestions(); // need to keep this\n\n    this.questions = this.questionService.getQuestions();\n    this.allQuestions = true;\n    this.usersQuestions = false;\n  }\n\n  ionViewWillEnter() {\n    this.addView();\n  }\n\n  getUserQuestions() {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.afs.collection('questions', ref => ref.where('userID', '==', val).orderBy('timestamp', 'desc')).valueChanges({\n          idField: 'id'\n        }).subscribe(questionList => {\n          this.thisUserQuestionList = questionList;\n          this.thisUserLoadedQuestionList = questionList;\n        });\n      }\n    });\n  }\n\n  getAllQuestions() {\n    this.afs.collection('questions', ref => ref.orderBy('timestamp', 'desc')).valueChanges({\n      idField: 'id'\n    }).subscribe(questionList => {\n      this.questionList = questionList;\n      this.loadedQuestionList = questionList;\n    });\n  }\n\n  initializeQuestions() {\n    this.questionList = this.loadedQuestionList;\n  }\n\n  initializeUserQuestions() {\n    this.thisUserQuestionList = this.thisUserLoadedQuestionList;\n  }\n\n  filterUserQuestions(event) {\n    console.log('called');\n    this.initializeUserQuestions(); // Search query entered by users.\n\n    const searchInput = event.target.value;\n\n    if (searchInput) {\n      var results = [];\n      this.thisUserQuestionList = this.thisUserQuestionList.filter(currentQuestion => {\n        return currentQuestion.title.toLowerCase().indexOf(searchInput.toLowerCase()) > -1 || currentQuestion.description.toLowerCase().indexOf(searchInput.toLowerCase()) > -1;\n      });\n    }\n  }\n\n  filterQuestions(event) {\n    console.log('called');\n    this.initializeQuestions();\n    const searchInput = event.target.value; // Dont run search if user cleared their search query.\n\n    if (searchInput) {\n      // Iterate through array of questions using the filter function which removes an element when we return false.\n      this.questionList = this.questionList.filter(currentQuestion => {\n        // indexOf returns the index where the given string starts. For example \"eggs are good\".indexOf(\"good\") would return 9 since index 9 is where \"good\" starts in the string.\n        return currentQuestion.title.toLowerCase().indexOf(searchInput.toLowerCase()) > -1 || currentQuestion.description.toLowerCase().indexOf(searchInput.toLowerCase()) > -1;\n      });\n    }\n  }\n\n  addView() {\n    //this.analytic.sessionID = this.session.id;\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.analytic.page = 'infoDesk';\n            this.analytic.userID = val;\n            this.analytic.timestamp = firebase.firestore.FieldValue.serverTimestamp(); //this.analytic.sessionID = this.idReference;\n\n            this.analyticsService.addView(this.analytic).then(() => {\n              console.log('successful added view: infoDesk');\n            }, err => {\n              console.log('unsucessful added view: infoDesk');\n            });\n          });\n        });\n      }\n    });\n  } // gets admin set point amount and uses that to\n\n\n  displayForumInfo() {\n    this.presentAlert('What is the Information Desk?', 'The information desk is a forum where you can ask questions and respond to other ' + 'user questions. Here, all users ' + 'can see your questions, not just your cohort. You have the option to ask or comment anonymously' + ', allowing you to remain even more secret. Questions can be answered by providers, which ' + 'include clinic workers, nurses, and more.');\n  } // present a basic alert -- used for displaying gc info\n\n\n  presentAlert(header, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header,\n        message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    });\n  }\n\n  updateIndividualInfoDeskClicks() {\n    this.analyticsService.updateClicks('individualInfoDeskClicks');\n  }\n\n};\nForumPage = __decorate([Component({\n  selector: 'app-forum',\n  templateUrl: './forum.page.html',\n  styleUrls: ['./forum.page.scss']\n}), __metadata(\"design:paramtypes\", [QuestionService, Storage, Router, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, AnalyticsService, AlertController])], ForumPage);\nexport { ForumPage };","map":null,"metadata":{},"sourceType":"module"}