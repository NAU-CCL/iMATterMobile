{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar LaunchNavigator =\n/** @class */\nfunction (_super) {\n  __extends(LaunchNavigator, _super);\n\n  function LaunchNavigator() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.APP = {\n      USER_SELECT: 'user_select',\n      APPLE_MAPS: 'apple_maps',\n      GOOGLE_MAPS: 'google_maps',\n      WAZE: 'waze',\n      CITYMAPPER: 'citymapper',\n      NAVIGON: 'navigon',\n      TRANSIT_APP: 'transit_app',\n      YANDEX: 'yandex',\n      UBER: 'uber',\n      TOMTOM: 'tomtom',\n      BING_MAPS: 'bing_maps',\n      SYGIC: 'sygic',\n      HERE_MAPS: 'here_maps',\n      MOOVIT: 'moovit'\n    };\n    _this.TRANSPORT_MODE = {\n      DRIVING: 'driving',\n      WALKING: 'walking',\n      BICYCLING: 'bicycling',\n      TRANSIT: 'transit'\n    };\n    return _this;\n  }\n\n  LaunchNavigator.prototype.navigate = function (destination, options) {\n    return cordova(this, \"navigate\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.isAppAvailable = function (app) {\n    return cordova(this, \"isAppAvailable\", {}, arguments);\n  };\n\n  LaunchNavigator.prototype.availableApps = function () {\n    return cordova(this, \"availableApps\", {}, arguments);\n  };\n\n  LaunchNavigator.prototype.getAppDisplayName = function (app) {\n    return cordova(this, \"getAppDisplayName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.getAppsForPlatform = function (platform) {\n    return cordova(this, \"getAppsForPlatform\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsTransportMode = function (app, platform) {\n    return cordova(this, \"supportsTransportMode\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.getTransportModes = function (app, platform) {\n    return cordova(this, \"getTransportModes\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsDestName = function (app, platform) {\n    return cordova(this, \"supportsDestName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsStart = function (app, platform) {\n    return cordova(this, \"supportsStart\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsStartName = function (app, platform) {\n    return cordova(this, \"supportsStartName\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.supportsLaunchMode = function (app, platform) {\n    return cordova(this, \"supportsLaunchMode\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  LaunchNavigator.prototype.userSelect = function (destination, options) {\n    return cordova(this, \"userSelect\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(LaunchNavigator.prototype, \"appSelection\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"appSelection\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"appSelection\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  LaunchNavigator.pluginName = \"LaunchNavigator\";\n  LaunchNavigator.plugin = \"uk.co.workingedge.phonegap.plugin.launchnavigator\";\n  LaunchNavigator.pluginRef = \"launchnavigator\";\n  LaunchNavigator.repo = \"https://github.com/dpa99c/phonegap-launch-navigator\";\n  LaunchNavigator.platforms = [\"Android\", \"iOS\", \"Windows\", \"Windows Phone 8\"];\n\n  LaunchNavigator.ɵfac = /*@__PURE__*/function () {\n    var ɵLaunchNavigator_BaseFactory;\n    return function LaunchNavigator_Factory(t) {\n      return (ɵLaunchNavigator_BaseFactory || (ɵLaunchNavigator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LaunchNavigator)))(t || LaunchNavigator);\n    };\n  }();\n\n  LaunchNavigator.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LaunchNavigator,\n    factory: function (t) {\n      return LaunchNavigator.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LaunchNavigator;\n}(AwesomeCordovaNativePlugin);\n\nexport { LaunchNavigator }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}