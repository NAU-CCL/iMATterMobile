{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { SurveyService } from 'src/app/services/survey/survey.service';\nimport { Storage } from '@ionic/storage';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ProfileService } from 'src/app/services/user/profile.service';\nimport { DatePipe } from '@angular/common'; // Today's date as a Javascript Date Object\n\nconst today = new Date();\nlet AvailablePage = class AvailablePage {\n  constructor(surveySerivce, storage, router, afs, activatedRoute, userService, datepipe) {\n    this.surveySerivce = surveySerivce;\n    this.storage = storage;\n    this.router = router;\n    this.afs = afs;\n    this.activatedRoute = activatedRoute;\n    this.userService = userService;\n    this.datepipe = datepipe;\n    this.userCode = '';\n    this.emotion = '';\n    this.daysAUser = '';\n    this.dueDate = '';\n    this.answeredSurveys = [];\n    this.completed = '';\n  }\n\n  ngOnInit() {\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    });\n  }\n\n  ionViewDidEnter() {\n    // get all the surveys available\n    this.surveys = this.surveySerivce.getSurveys();\n    console.log(this.surveys); // obtain the user's code, emotion, days being a user, due date, and answered surveys\n\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.user = doc;\n            this.userCode = val;\n            this.emotion = doc.get('mood');\n            this.daysAUser = doc.get('daysAUser');\n            this.dueDate = doc.get('dueDate').split('-');\n            this.answeredSurveys = doc.get('answeredSurveys');\n            this.completed = doc.get('answeredSurveys');\n            this.userSurveys = doc.get('availableSurveys');\n            this.updateSurveys();\n          });\n        });\n      }\n    });\n  }\n\n  isDisplayed(survey) {} // isCompleted(survey: Survey) {\n  //   let complete = false;\n  //   this.answeredSurveys.forEach(id => {\n  //     if (id.split(':')[0] === survey.id) {\n  //       complete = true;\n  //     }\n  //   });\n  //   return complete;\n  // }\n\n\n  answerSurvey(survey) {\n    let submitData;\n    submitData = survey.id + ':' + this.daysAUser;\n    this.router.navigate(['/tabs/home/available/answer/' + submitData]);\n  }\n\n  updateSurveys() {\n    const currentSurveys = this.user.get('availableSurveys');\n    this.surveys.forEach(surveyArray => {\n      surveyArray.forEach(survey => {\n        this.checkComplete(survey);\n        console.log(this.surveyComplete);\n\n        if (!this.surveyComplete) {\n          if (survey['type'] == 'Days After Joining') {\n            var characteristics = survey['characteristics'];\n\n            if (this.user.get('daysAUser') >= characteristics['daysAfterJoining']) {\n              if (!currentSurveys.includes(survey['id'])) {\n                currentSurveys.push(survey['id']);\n              }\n            }\n          } else if (survey['type'] == 'Repeating') {\n            // check if repeating survey already complete\n            var weekdays = new Array(\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\");\n            var characteristics = survey['characteristics'];\n            var date = new Date();\n            var dayOfWeek = weekdays[date.getDay()];\n            var dayOfMonth = date.getDate();\n\n            if (characteristics['repeatEvery']) {\n              if (characteristics['repeatEvery'] == 'weekly' && dayOfWeek == characteristics['display']) {\n                if (!currentSurveys.includes(survey['id'])) {\n                  currentSurveys.push(survey['id']);\n                }\n              } else if (characteristics['repeatEvery'] == 'monthy' && dayOfMonth == characteristics['display']) {\n                if (!currentSurveys.includes(survey['id'])) {\n                  currentSurveys.push(survey['id']);\n                }\n              } else if (characteristics['repeatEvery'] == 'daily') {\n                if (!currentSurveys.includes(survey['id'])) {\n                  currentSurveys.push(survey['id']);\n                }\n              }\n            }\n          }\n        } else {\n          this.surveyComplete = false;\n        }\n\n        this.userSurveys = currentSurveys;\n        this.userService.updateAvailableSurveys(currentSurveys, this.userCode);\n      });\n    });\n  }\n\n  checkComplete(survey) {\n    const surveyID = survey['id'];\n    const today = new Date();\n    const todayString = this.datepipe.transform(today, 'y-MM-dd');\n    this.answeredSurveys.forEach(complete => {\n      if (survey['type'] === 'Repeating') {\n        if (complete['survey'] === surveyID && todayString === complete['date']) {\n          this.surveyComplete = true;\n        }\n      } else {\n        if (complete['survey'] === surveyID) {\n          this.surveyComplete = true;\n        }\n      }\n    });\n  }\n\n};\nAvailablePage = __decorate([Component({\n  selector: 'app-available',\n  templateUrl: './available.page.html',\n  styleUrls: ['./available.page.scss']\n}), __metadata(\"design:paramtypes\", [SurveyService, Storage, Router, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ActivatedRoute, ProfileService, DatePipe])], AvailablePage);\nexport { AvailablePage };","map":null,"metadata":{},"sourceType":"module"}