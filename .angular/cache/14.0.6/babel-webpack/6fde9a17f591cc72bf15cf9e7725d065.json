{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { SurveyService } from 'src/app/services/survey/survey.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport { ProfileService } from 'src/app/services/user/profile.service';\nimport { Storage } from '@ionic/storage';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ModalController } from '@ionic/angular';\nimport { AlertController } from '@ionic/angular';\nimport { DatePipe } from '@angular/common';\nlet AnswerPage = class AnswerPage {\n  constructor(activatedRoute, surveyService, browser, router, profile, storage, afs, modalController, alertController, datepipe) {\n    this.activatedRoute = activatedRoute;\n    this.surveyService = surveyService;\n    this.browser = browser;\n    this.router = router;\n    this.profile = profile;\n    this.storage = storage;\n    this.afs = afs;\n    this.modalController = modalController;\n    this.alertController = alertController;\n    this.datepipe = datepipe; // Survey object and its fields\n\n    this.survey = {\n      type: '',\n      description: '',\n      title: '',\n      link: '',\n      points: 0,\n      importance: '',\n      characteristics: []\n    };\n    this.availableSurveys = [];\n  }\n\n  ngOnInit() {\n    // if the user is not authenticated, sends the user to login page\n    this.storage.get('authenticated').then(val => {\n      if (val === 'false') {\n        this.router.navigate(['/login/']);\n      }\n    }); // surveyData is initialized to the id that will be taken from the available page\n\n    this.surveyData = this.activatedRoute.snapshot.paramMap.get('id'); // survey id is taken\n\n    this.id = this.surveyData.split(':')[0]; // if the id exists, assign the survey object to the survey for which the id belongs to\n\n    if (this.id) {\n      this.surveyService.getSurvey(this.id).subscribe(survey => {\n        this.survey = survey;\n      });\n    } // using the current user's unique code, obtain the user's points, code, and taken surveys\n\n\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.userPoints = doc.get('points');\n            this.userCode = doc.get('code');\n            this.userSurveysTaken = doc.get('answeredSurveys');\n            this.availableSurveys = doc.get('availableSurveys');\n            this.daysAUser = doc.get('daysAUser');\n          });\n        });\n      }\n    });\n    console.log('SURVEY ID = ' + this.id);\n    this.startTime = new Date();\n    this.startTime = this.datepipe.transform(this.startTime, 'hh:mm a');\n  } // opens survey link\n\n\n  openPage(url) {\n    const today = new Date();\n    this.startTime = this.datepipe.transform(today, 'hh:mm a'); // option to hide survey url and change toolbar color\n\n    const options = {\n      hideurlbar: 'yes',\n      toolbarcolor: '#ffffff'\n    }; // Add the UserID=userid get param to the url so qualtrics can automatically grab it from the url\n    // In order for this to work, the survey must have an embedded data element named UserID.\n\n    url += '?UserID=' + this.userCode.toString(); // open the browser inside of the app, using the url, and the options\n\n    const page = this.browser.create(url, `_blank`, options); // When the user exits the survey page show them a message\n\n    page.on('exit').subscribe(event => {\n      // this.showMessage()\n      this.presentAlert();\n    });\n  } // submits survey\n\n\n  submit() {\n    console.log('SUBMIT'); // boolean to check if current survey is inluded in the userSurveysTaken\n\n    let includes = false;\n    let today = new Date(); // if the userSurveysTaken is not empty or it does not include the current survey\n    // then simply add it to the array with the current survey interval\n    // and update the user's userSurveysTaken\n\n    let surveyTaken = {\n      survey: this.id,\n      date: this.datepipe.transform(today, 'y-MM-dd'),\n      timeStart: this.startTime,\n      timeEnd: this.datepipe.transform(today, 'hh:mm:ss a'),\n      days: this.daysAUser\n    };\n    console.log(surveyTaken);\n    this.userSurveysTaken.push(surveyTaken);\n    this.availableSurveys.splice(this.availableSurveys.indexOf(this.id), 1);\n    console.log(this.userSurveysTaken);\n    this.surveyService.updateAnsweredSurveys(this.userCode, this.userSurveysTaken, this.availableSurveys); // then increase the user's current points by the amount that the current\n    // survey is worth, then navigate back to the home page\n\n    const newPointValue = this.userPoints + this.survey.points;\n    this.profile.editRewardPoints(newPointValue, this.userCode);\n    this.router.navigateByUrl('/tabs/home');\n  } // determines if the survey is completed\n\n\n  isComplete() {\n    if (this.surveyData.split(':')[1] === 'completed') {\n      return true;\n    }\n\n    return false;\n  } // message that is presented after completing the survey\n\n\n  presentAlert() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header: 'You Completed The Survey',\n        subHeader: 'Thank You',\n        message: 'Thanks for taking the Survey, your input is really appreciated.',\n        buttons: [{\n          text: 'OK',\n          handler: () => {\n            this.submit();\n          }\n        }]\n      });\n      yield alert.present();\n    });\n  }\n\n};\nAnswerPage = __decorate([Component({\n  selector: 'app-answer',\n  templateUrl: './answer.page.html',\n  styleUrls: ['./answer.page.scss']\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, SurveyService, InAppBrowser, Router, ProfileService, Storage, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ModalController, AlertController, DatePipe])], AnswerPage);\nexport { AnswerPage };","map":null,"metadata":{},"sourceType":"module"}