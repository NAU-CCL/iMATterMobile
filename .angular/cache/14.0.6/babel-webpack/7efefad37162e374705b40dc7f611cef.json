{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { LocationService } from 'src/app/services/resource.service';\nimport { InAppBrowser } from '@ionic-native/in-app-browser/ngx';\nimport { CallNumber } from '@awesome-cordova-plugins/call-number/ngx'; // Allows us to open apple or google maps from the app when user clicks an address.\n\nimport { LaunchNavigator } from '@awesome-cordova-plugins/launch-navigator/ngx';\nimport { Device } from '@ionic-native/device/ngx';\nimport { AlertController } from '@ionic/angular';\nimport { PopoverController } from '@ionic/angular';\nimport { ReviewTagPopoverComponent } from './review-tag-popover/review-tag-popover.component';\nlet ResourcePage = class ResourcePage {\n  constructor(resourceService, storage, router, afs, activatedRoute, inAppBrowser, toastCtl, callNumber, launchNavigator, device, alertController, popoverController) {\n    this.resourceService = resourceService;\n    this.storage = storage;\n    this.router = router;\n    this.afs = afs;\n    this.activatedRoute = activatedRoute;\n    this.inAppBrowser = inAppBrowser;\n    this.toastCtl = toastCtl;\n    this.callNumber = callNumber;\n    this.launchNavigator = launchNavigator;\n    this.device = device;\n    this.alertController = alertController;\n    this.popoverController = popoverController;\n    this.resource = {\n      id: '',\n      title: '',\n      content: '',\n      addressType: '',\n      latitude: 0,\n      longitude: 0,\n      distance: 0,\n      street: '',\n      phone: '',\n      phone24Hour: null,\n      MOpen: '',\n      MClose: '',\n      TOpen: '',\n      TClose: '',\n      WOpen: '',\n      WClose: '',\n      ThOpen: '',\n      ThClose: '',\n      FOpen: '',\n      FClose: '',\n      SatOpen: '',\n      SatClose: '',\n      SunOpen: '',\n      SunClose: '',\n      special: '',\n      type: '',\n      hourType: '',\n      url: '',\n      cityState: ''\n    };\n    this.starArray = [1, 2, 3, 4, 5]; // Used to create star rating icons for resource.\n\n    this.tagAttrs = [];\n    this.askChildToReloadReviews = true; // Template Variables //\n\n    this.tagsCollapsed = false;\n  }\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.storage.get('authenticated').then(val => {\n        if (val === 'false') {\n          this.router.navigate(['/login/']);\n        }\n      });\n    });\n  }\n\n  ionViewWillEnter() {\n    this.resourceID = this.activatedRoute.snapshot.paramMap.get('id'); // Variable that indicates whether the child element display-reviews should reload reviews.\n    // Triggers a change event in the child to reload reviews!\n\n    this.askChildToReloadReviews = !this.askChildToReloadReviews;\n    this.tagAttrs = [];\n\n    if (this.resourceID) {\n      this.resourceService.getLocation(this.resourceID).subscribe(resource => {\n        this.resource = resource;\n        console.log(this.resource);\n      });\n    }\n\n    console.log(`Entering resource page.ts`);\n  } // Use a capictor plugin to open the user phone app with a number \n  // Called when user clicks on a resoruces phone number.\n\n\n  callResourcePhone() {\n    this.callNumber.callNumber(this.resource.phone, true).then(res => console.log('Launched dialer!', res)).catch(err => console.log('Error launching dialer', err));\n  }\n\n  openAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      var platform = this.device.platform.toLowerCase();\n      var map_error;\n      var map_success;\n\n      if (platform == \"android\") {\n        this.launchNavigator.navigate(\"London, UK\", {\n          app: this.launchNavigator.APP.GOOGLE_MAPS\n        }).then(success => {\n          console.log('Launched navigator');\n          map_success = success;\n        }, error => {\n          console.log('Error launching navigator', error);\n          map_error = error;\n        });\n      } else if (platform == \"ios\") {\n        this.launchNavigator.navigate(\"London, UK\", {\n          app: this.launchNavigator.APP.APPLE_MAPS\n        }).then(success => {\n          console.log('Launched navigator');\n          map_success = success;\n        }, error => {\n          console.log('Error launching navigator', error);\n          map_error = error;\n        });\n      }\n\n      var error_alert = yield this.alertController.create({\n        header: 'You CLicked open address!',\n        subHeader: 'Thank You',\n        message: `Error:  ${map_error} \\n Success: ${map_success} Platform: ${platform}`,\n        buttons: [{\n          text: 'OK',\n          role: 'cancel'\n        }]\n      });\n      yield error_alert.present();\n    });\n  }\n\n  visitSite(url) {\n    console.log(url);\n    const browser = this.inAppBrowser.create(url);\n    browser.show();\n  }\n\n  copyAddress(address) {\n    document.addEventListener('copy', e => {\n      e.clipboardData.setData('text/plain', address);\n      e.preventDefault();\n    });\n    document.execCommand('copy');\n    this.showToast('Copied to Clipboard!');\n  }\n\n  showToast(msg) {\n    this.toastCtl.create({\n      message: msg,\n      duration: 2000\n    }).then(toast => toast.present());\n  }\n\n  getReviewAvg(reviewInfoArray) {\n    this.reviewAvg = reviewInfoArray[0];\n    this.totalReviews = reviewInfoArray[1]; //console.log(`Review avg IN PARENT is ${reviewInfoArray}`);\n  } // This method is called in response to the child component of resource.page which is\n  // display-reviews.page Outputting a value to the parent. The parent intercepts the event as a call to this\n  // function. The parent receives a javascript object which contains an array of objects whos key names correspond to tag names.\n\n\n  getReviewTagInfo(reviewTagInfoObj) {\n    this.reviewTagInfoObj = reviewTagInfoObj;\n    this.generateTagAttributes(this.reviewTagInfoObj); //console.log(`REVIEW TAG IN PARENT OBJ ${JSON.stringify(reviewTagInfoObj) }`);\n  } // Generates an array of 3 element arrays that store a tags name, the color it should be, success for green, red for danger, and orange for warning, and the question name.\n\n\n  generateTagAttributes(reviewTagInfo) {\n    //console.log(`REVIEW TAG INFO OBJ IS ${JSON.stringify( reviewTagInfo )}`)\n    for (let questionName in reviewTagInfo) {\n      let questionInfoObj = reviewTagInfo[questionName]; // tagInfoObj is a string representing a key inside the reviewTagInfo object.\n\n      let tagName = questionInfoObj.tagName;\n\n      if (questionInfoObj.yes != 0 && questionInfoObj.no == 0) {\n        this.tagAttrs.push([tagName, 'success', questionName]);\n      } else if (questionInfoObj.yes == 0 && questionInfoObj.no != 0) {\n        this.tagAttrs.push([tagName, 'danger', questionName]);\n      } else {\n        this.tagAttrs.push([tagName, 'warning', questionName]);\n      } //console.log(`TAG OBJ ${tagName }`);\n\n    }\n  }\n\n  toggleTagModal() {\n    let modal = document.querySelector('#tag-modal');\n    modal.style.display = \"block\";\n    modal.classList.add('animate-modal');\n  }\n\n  presentPopover(questionName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const popover = yield this.popoverController.create({\n        component: ReviewTagPopoverComponent,\n        translucent: true,\n        componentProps: {\n          tagObject: this.reviewTagInfoObj[questionName],\n          questionName: questionName\n        },\n        cssClass: 'tag-pop-up'\n      });\n      return yield popover.present();\n    });\n  }\n\n};\nResourcePage = __decorate([Component({\n  selector: 'app-resource',\n  templateUrl: './resource.page.html',\n  styleUrls: ['./resource.page.scss']\n}), __metadata(\"design:paramtypes\", [LocationService, Storage, Router, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ActivatedRoute, InAppBrowser, ToastController, CallNumber, LaunchNavigator, Device, AlertController, PopoverController])], ResourcePage);\nexport { ResourcePage };","map":null,"metadata":{},"sourceType":"module"}