{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nlet SurveyService = class SurveyService {\n  constructor(angularfs) {\n    this.angularfs = angularfs; // gets the collection of surveys\n\n    this.surveyCollection = this.angularfs.collection('surveys-v2'); //  looks for changes and updates, also grabs the data\n\n    this.surveys = this.surveyCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data); // Take all the key and value pairs from data and toss them into the object along with id. Basically extract the data object properties and place it in a new obj.\n      });\n    }));\n  } // gets all of the surveys in the survey collection\n\n\n  getSurveys() {\n    return this.surveys;\n  } // gets an individual survey with id provided\n\n\n  getSurvey(id) {\n    return this.surveyCollection.doc(id).valueChanges().pipe(take(1), map(survey => {\n      survey.id = id;\n      return survey;\n    }));\n  } // adds the survey to the database\n\n\n  addSurvey(survey) {\n    return this.surveyCollection.add(survey);\n  } // updates the survey in the database\n\n\n  updateSurvey(survey) {\n    return this.surveyCollection.doc(survey.id).update({\n      title: survey.title,\n      link: survey.link,\n      type: survey.type,\n      description: survey.description,\n      points: Number(survey.points),\n      importance: survey.importance,\n      characteristics: survey.characteristics\n    });\n  } // deletes the survey with the id provided\n\n\n  deleteSurvey(id) {\n    return this.surveyCollection.doc(id).delete();\n  } // updates user's answeredSurveys list\n\n\n  updateAnsweredSurveys(userID, answered, available) {\n    this.angularfs.firestore.collection('users').doc(userID).update({\n      answeredSurveys: answered\n    });\n    this.angularfs.firestore.collection('users').doc(userID).update({\n      availableSurveys: available\n    });\n  }\n\n};\nSurveyService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object])], SurveyService);\nexport { SurveyService };","map":null,"metadata":{},"sourceType":"module"}