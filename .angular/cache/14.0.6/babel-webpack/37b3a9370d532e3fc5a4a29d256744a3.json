{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { LearningModuleService } from '../../../services/learningModule/learning-module.service';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { ProfileService } from '../../../services/user/profile.service';\nimport { AlertController } from '@ionic/angular';\nimport { IonContent } from '@ionic/angular';\nlet LearningModuleContentPage =\n/**\n * Youtube video stuff written with help from this article:\n * https://medium.com/@gouravkajal/integrate-youtube-iframe-player-api-in-angular-98ab9661aff6\n */\nclass LearningModuleContentPage {\n  constructor(activatedRoute, learningModuleService, domSanitizer, toastController, storage, afs, profileService, alertController) {\n    this.activatedRoute = activatedRoute;\n    this.learningModuleService = learningModuleService;\n    this.domSanitizer = domSanitizer;\n    this.toastController = toastController;\n    this.storage = storage;\n    this.afs = afs;\n    this.profileService = profileService;\n    this.alertController = alertController;\n    this.learningModule = {\n      moduleTitle: '',\n      moduleDescription: '',\n      moduleContent: '',\n      moduleVideoID: '',\n      modulePPTurl: '',\n      moduleVisibilityTime: '',\n      moduleExpiration: 0,\n      moduleActive: null,\n      moduleQuiz: [],\n      modulePointsWorth: 0,\n      moduleNext: '',\n      userVisibility: [''],\n      previousUserVisibility: ['']\n    };\n    this.quizQuestions = {\n      questionText: '',\n      choice1: '',\n      choice2: '',\n      choice3: '',\n      choice4: '',\n      correctAnswer: '',\n      pointsWorth: 0,\n      userSelection: ''\n    }; //Quiz Variables\n\n    this.totalNumberQuizQuestions = 0;\n    this.quizSubmissionLimit = 3; //if changed, change this hardcoded number in presentPreventSubmit()\n    //Used for resetting the quiz selections when the user wants to retake a quiz\n\n    this.quizForm = new FormGroup({\n      \"quizSelections\": new FormControl()\n    });\n  }\n\n  ngOnInit() {\n    this.learningModules = this.learningModuleService.getAllLearningModules();\n  }\n\n  ionViewWillEnter() {\n    this.storage.get('userCode').then(val => {\n      if (val) {\n        this.userProfileID = val;\n        const ref = this.afs.firestore.collection('users').where('code', '==', val);\n        ref.get().then(result => {\n          result.forEach(doc => {\n            this.totalUserPoints = doc.get('points');\n          });\n        });\n      }\n    });\n    let id = this.activatedRoute.snapshot.paramMap.get('id');\n\n    if (id) {\n      this.learningModuleService.getLearningModule(id).subscribe(learningModule => {\n        this.learningModule = learningModule; //If there is a YouTube video\n\n        if (learningModule.moduleVideoID != '') {\n          //initialize the YouTube video player\n          this.youtubeIframeInit();\n        } //If there is a PPT URL\n\n\n        if (learningModule.modulePPTurl != '') {\n          //need to sanitize the url for the powerpoint, otherwise there will be security complaint and it won't show\n          this.sanitizedPPTurl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.learningModule.modulePPTurl);\n        } //count number of questions in this module\n\n\n        this.countQuestions(); //get moduleNext's title to display if there is a moduleNext \n\n        if (this.learningModule.moduleNext !== '') {\n          this.getNextModuleTitle();\n        }\n      }); //this line is important!! attaches the ID to the learning module so the content for that LM shows up\n\n      this.learningModule.id = id; //IMPORTANT! initializes variables for learning module (retrieves from storage when applicable)\n\n      this.initializeStorage();\n    }\n  }\n\n  ionViewDidEnter() {\n    //this module has been viewed\n    this.storage.set(this.learningModule.id + \"beenViewed\", true);\n  }\n  /**\n   * Initializes local storage for the specific learning module\n   * If first time in module, initializes variables to what they should be\n   * If not first time, retrieves the saved values from storage\n   */\n\n\n  initializeStorage() {\n    //VideoHasEnded\n    this.storage.get(this.learningModule.id + \"videoHasEnded\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.videoHasEnded = value;\n          console.log('videohasended: ' + this.videoHasEnded);\n        } else //first time in module\n        {\n          this.videoHasEnded = false;\n        }\n    }).catch(e => {\n      console.log('error retrieving videoHasEnded: ' + e);\n    }); //NumberTimesQuizTaken\n\n    this.storage.get(this.learningModule.id + \"numberTimesQuizTaken\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.numberTimesQuizTaken = value;\n          console.log('numbertimesquiztaken: ' + this.numberTimesQuizTaken);\n        } else //first time in module\n        {\n          this.numberTimesQuizTaken = 0;\n        }\n    }).catch(e => {\n      console.log('error retrieving numberTimesQuizTaken: ' + e);\n    }); //NumberQuestionsCorrect\n\n    this.storage.get(this.learningModule.id + \"numberQuestionsCorrect\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.numberQuestionsCorrect = value;\n          console.log('numberquestionscorrect: ' + this.numberQuestionsCorrect);\n        } else //first time in module\n        {\n          this.numberQuestionsCorrect = 0;\n        }\n    }).catch(e => {\n      console.log('error retrieving numberQuestionsCorrect: ' + e);\n    }); //DidSubmit - whether they've submitted quiz\n\n    this.storage.get(this.learningModule.id + \"didSubmit\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.didSubmit = value;\n          console.log('didSubmit: ' + this.didSubmit);\n        } else //first time in module\n        {\n          this.didSubmit = false;\n        }\n    }).catch(e => {\n      console.log('error retrieving didSubmit: ' + e);\n    }); //CorrectQuestions (quiz)\n\n    this.storage.get(this.learningModule.id + \"correctQuestions\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.correctQuestions = value;\n          console.log('correctQuestions: ' + this.correctQuestions);\n        } else //first time in module\n        {\n          this.correctQuestions = [''];\n        }\n    }).catch(e => {\n      console.log('error retrieving correctQuestions: ' + e);\n    }); //PreviousQuizAttemptPoints\n\n    this.storage.get(this.learningModule.id + \"previousQuizAttemptPoints\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.previousQuizAttemptPoints = value;\n          console.log('previousQuizAttemptPoints: ' + this.previousQuizAttemptPoints);\n        } else //first time in module\n        {\n          this.previousQuizAttemptPoints = 0;\n        }\n    }).catch(e => {\n      console.log('error retrieving previousQuizAttemptPoints: ' + e);\n    }); //CurrentQuizPoints\n\n    this.storage.get(this.learningModule.id + \"currentQuizPoints\").then(value => {\n      if (value != null) //not first time in module\n        {\n          this.currentQuizPoints = value;\n          console.log('currentQuizPoints: ' + this.currentQuizPoints);\n        } else //first time in module\n        {\n          this.currentQuizPoints = 0;\n        }\n    }).catch(e => {\n      console.log('error retrieving currentQuizPoints: ' + e);\n    });\n  }\n  /**\n   * Specific function for using YouTube API to track whether video has ended\n   * Refer to tutorial linked above\n   */\n\n\n  youtubeIframeInit() {\n    if (window['YT']) {\n      this.startVideo();\n      return;\n    }\n\n    var tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    window['onYouTubeIframeAPIReady'] = () => this.startVideo();\n  }\n  /**\n   * playerVars descriptions can be found here:\n   * https://developers.google.com/youtube/player_parameters\n   */\n\n\n  startVideo() {\n    this.player = new window['YT'].Player('player' + this.learningModule.id, //IMPORTANT: give every player a unique id \n    {\n      videoId: this.learningModule.moduleVideoID,\n      playerVars: {\n        controls: 0,\n        fs: 1,\n        playsinline: 1,\n        modestbranding: 1,\n        rel: 0,\n        disablekb: 1,\n        autoplay: 0\n      },\n      events: {\n        'onStateChange': this.onPlayerStateChange.bind(this)\n      }\n    });\n  }\n\n  onPlayerStateChange(event) {\n    //code 0 means video has ended\n    if (event.data == 0) {\n      this.videoHasEnded = true;\n      this.storage.set(this.learningModule.id + \"videoHasEnded\", this.videoHasEnded);\n    }\n  } //Get the total number of quiz questions\n\n\n  countQuestions() {\n    this.learningModule.moduleQuiz.forEach(element => {\n      this.totalNumberQuizQuestions += 1;\n    });\n  }\n  /**\n   * Updates the user's answer selection in the correct Question every time the selection changes\n   */\n\n\n  quizRadioChange(questionName, event) {\n    this.learningModule.moduleQuiz.forEach(element => {\n      if (element.questionText === questionName) {\n        element.userSelection = event.detail.value;\n      }\n    });\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      if (this.content.scrollToBottom) {\n        this.content.scrollToBottom(100);\n      }\n    }, 500);\n  }\n  /**\n   * Handles checking user selections against the correct answers and counting the number of questions that are correct.\n   * This function will not be called if quiz limit is reached\n   */\n\n\n  quizSubmit() {\n    this.didSubmit = true;\n    this.storage.set(this.learningModule.id + \"didSubmit\", this.didSubmit); //Check quiz limit has not been reached\n    //Used as a backup check since it's already primarily checked in HTML\n\n    if (this.numberTimesQuizTaken < this.quizSubmissionLimit) {\n      //reset some values for each submission\n      if (this.numberQuestionsCorrect > 0) {\n        this.currentQuizPoints = 0;\n        this.correctQuestions = [''];\n        this.numberQuestionsCorrect = 0;\n      } //Check if user's selections are correct\n      //Increment number of questions correct\n\n\n      this.learningModule.moduleQuiz.forEach(element => {\n        if (element.correctAnswer === element.userSelection) {\n          //Add this question to the list of ones they got correct\n          this.correctQuestions.push(element.questionText); //Add this question's points worth to current quiz points\n\n          this.currentQuizPoints += element.pointsWorth;\n          this.numberQuestionsCorrect += 1;\n          this.storage.set(this.learningModule.id + \"numberQuestionsCorrect\", this.numberQuestionsCorrect);\n        }\n      }); //Store the list of questions they got correct\n\n      this.storage.set(this.learningModule.id + \"correctQuestions\", this.correctQuestions); //Calculate how many total points the user should have after taking this module\n      //This takes into account if they've taken it before\n\n      var calculatePoints = this.totalUserPoints - this.previousQuizAttemptPoints + this.currentQuizPoints; //this is necessary in case the user leaves and comes back (used for display purposes)\n\n      this.storage.set(this.learningModule.id + \"currentQuizPoints\", this.currentQuizPoints);\n      this.storage.set(this.learningModule.id + \"previousQuizAttemptPoints\", this.currentQuizPoints);\n      this.profileService.editRewardPoints(calculatePoints, this.userProfileID);\n      this.numberTimesQuizTaken += 1;\n      this.storage.set(this.learningModule.id + \"numberTimesQuizTaken\", this.numberTimesQuizTaken);\n      this.scrollToBottom();\n    } else {\n      //If the quiz taking limit is exceeded\n      this.presentPreventSubmit();\n    }\n  }\n  /**\n   * If user clicks on button to retake the quiz, radio selections and didSubmit will be reset\n   */\n\n\n  retakeQuiz() {\n    this.quizForm.controls.quizSelections.reset();\n    this.didSubmit = false;\n    this.storage.set(this.learningModule.id + \"didSubmit\", this.didSubmit);\n  }\n  /**\n   * Present a toast telling the user their limit is reached\n   */\n\n\n  presentPreventSubmit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const toast = yield this.toastController.create({\n        header: 'Quiz Limit Reached',\n        message: \"You've reached the limit of 3 quiz submissions.\",\n        position: 'bottom',\n        buttons: [{\n          text: 'Okay',\n          role: 'cancel'\n        }]\n      });\n      toast.present();\n    });\n  }\n  /**\n   * Get the title of the module stored in moduleNext\n   */\n\n\n  getNextModuleTitle() {\n    this.learningModules.forEach(element => {\n      for (var index = 0; index < element.length; index++) {\n        if (element[index].id == this.learningModule.moduleNext) {\n          this.nextModuleTitle = element[index].moduleTitle;\n          return;\n        }\n      }\n    });\n  }\n\n  presentAlert(header, message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const alert = yield this.alertController.create({\n        header,\n        message,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    });\n  }\n\n  displayVideoPlayerInfo() {\n    this.presentAlert('About Video Player', '<b>Full Screen:</b> ' + 'Double tap video to go full screen. Double tap again to exit full screen.<br><br>');\n  }\n\n  clearStorage() {\n    this.storage.remove(this.learningModule.id + \"videoHasEnded\");\n    this.storage.remove(this.learningModule.id + \"numberTimesQuizTaken\");\n    this.storage.remove(this.learningModule.id + \"numberQuestionsCorrect\");\n    this.storage.remove(this.learningModule.id + \"didSubmit\");\n    this.storage.remove(this.learningModule.id + \"correctQuestions\");\n    this.storage.remove(this.learningModule.id + \"previousQuizAttemptPoints\");\n    this.storage.remove(this.learningModule.id + \"currentQuizPoints\");\n    this.storage.remove(this.learningModule.id + \"beenViewed\");\n    this.storage.remove(this.learningModule.id + \"storedPrevUV\");\n    this.storage.remove(this.learningModule.id + \"storedCurrentUV\");\n    this.storage.remove(this.learningModule.id + \"localUVStoreDate\");\n  }\n\n};\n\n__decorate([ViewChild('content', {\n  static: true\n}), __metadata(\"design:type\", IonContent)], LearningModuleContentPage.prototype, \"content\", void 0);\n\nLearningModuleContentPage = __decorate([Component({\n  selector: 'app-learning-module-content',\n  templateUrl: './learning-module-content.page.html',\n  styleUrls: ['./learning-module-content.page.scss']\n})\n/**\n * Youtube video stuff written with help from this article:\n * https://medium.com/@gouravkajal/integrate-youtube-iframe-player-api-in-angular-98ab9661aff6\n */\n, __metadata(\"design:paramtypes\", [ActivatedRoute, LearningModuleService, DomSanitizer, ToastController, Storage, typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object, ProfileService, AlertController])], LearningModuleContentPage);\nexport { LearningModuleContentPage };","map":null,"metadata":{},"sourceType":"module"}