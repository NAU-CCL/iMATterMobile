{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map, take } from 'rxjs/operators';\nlet LocationService = class LocationService {\n  constructor(afs) {\n    this.afs = afs;\n  }\n\n  getLocationCollection() {\n    this.locationCollection = this.afs.collection('resourceLocations', ref => ref.orderBy('title', 'asc'));\n    this.locations = this.locationCollection.snapshotChanges().pipe(map(actions => {\n      return actions.map(a => {\n        const data = a.payload.doc.data();\n        data.id = a.payload.doc.id;\n        return data;\n      });\n    }));\n  }\n\n  getLocations() {\n    this.getLocationCollection();\n    return this.locations;\n  }\n\n  getLocation(id) {\n    return this.locationCollection.doc(id).valueChanges().pipe(take(1), map(location => {\n      location.id = id;\n      return location;\n    }));\n  }\n\n  encodeImageUri(imageUri, callback) {\n    var c = document.createElement('canvas');\n    var ctx = c.getContext(\"2d\");\n    var img = new Image();\n\n    img.onload = function () {\n      var aux = this;\n      c.width = aux.width;\n      c.height = aux.height;\n      ctx.drawImage(img, 0, 0);\n      var dataURL = c.toDataURL(\"image/jpeg\");\n      callback(dataURL);\n    };\n\n    img.src = imageUri;\n  }\n\n};\nLocationService = __decorate([Injectable({\n  providedIn: 'root'\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof AngularFirestore !== \"undefined\" && AngularFirestore) === \"function\" ? _a : Object])], LocationService);\nexport { LocationService };","map":null,"metadata":{},"sourceType":"module"}