This will have two purposes:
1. Describing the basic steps to get a new version of iMATter onto the Google play store
2. A list of gotchas that plagued the first attempt to upload to google play

Uploading iMATter to Google play
0. Add new splash to the loading screen. This can be done via the instructions found int the "Team-ReBoot.-Final-as-build-report.docx"

1. Ensure the config is targeting the correct SDK version. As of 2022, SDK 32 must be tartgeted, but by Aug. 2023, SDK 33 must be. 
    a. This can be checked in the  'config.xml' file, in the preference tag: "android-targetSdkVersion"
    b. If you had to change this, you will have to update the android platform with: 
        $ cordova platform remove android
        followed by:
        $ cordova platform add android
    c. You may need to add the following to platforms/android/app/build.gradle:
        android{
            # what is already here
            ... 

            # add the following:
            defaultTargetSdkVersion = 32 # the newest android platform
        }
    d. ensure you have the platform tools required. If in a directory where you can use sdkmanager, run:
        $ sdkmanager --install "platform-tools" "platforms;android-{number of the android platform}"
        and to ensure the build tools are there, go to https://developer.android.com/studio/releases/build-tools and find the newest version. Then:
        $ sdkmanager --install "build-tools;{the newest version}"
2. If the android platform is not installed, install in the project root with:
    $ cordova platform add android
3. The gradlew wrapper:
    gradlew is a wrapper over the gradle function, allowing specific build tools that were used previously to be used in the present, regardless of the current build tools
    More about the gradle wrapper can be found at https://docs.gradle.org/current/userguide/gradle_wrapper.html
    Importantly, note that the wrapper should be used unless that build does not allow for upload to google play ( a new platform is required )
4. You need a new gradle: 
    If you are upgrading to a new platform, or just are doing a fresh install, you will need a new gradle wrapper. This can be generated by
    running the following command in the project root:
    $ ionic cordova build android
5. After you generate a gradlew file, do:
    $ cd platforms/android
    then, if using linux, run:
    ./gradlew bundle
    or on windows:
    gradlew.bat
    or on mac:
    gradle bundle

This will generate the .aab file needed to upload to the Google Play Store, but we still need to sign it 

6. Sign the .aab 
    Make sure jarsigner is in your path, then run:
    $ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore platforms/android/app/build/outputs/bundle/release/app-release.aab alias_name
    This looks like an incorrect command, but don't change it, otherwise it won't work
    Then just put in the password for the key, then it signs it. Almost done 

7. Rename the new .aab: 
    The older version of the .aab can be moved into the older releases folder, and the new version needs to be moved into the main directory for clarity.
    In the project root directory, run, replacing with the actual version of the release:
    $ cp platforms/android/app/build/outputs/bundle/release/app-release.aab ./iMATter_VX.X.X.aab 

8. Navigate to the Google Play Development console and on the sidebar, click app bundle explorer. In the top right, click, upload new bundle, then upload the newly copied file.
    Done!

Gotchas: This is a list of things that have gone wrong in the past in order to not mess these up in the future
